{"/":{"title":"Patchouli Computatrum","content":"\n[![66078577_p0_master1200](https://user-images.githubusercontent.com/100863878/169485293-1596dad7-4ff0-4d32-b676-b77226307e90.jpg)](https://www.pixiv.net/en/artworks/66078577)\n\n\n*\"Computers are like humans - they do everything except think.\" ~ [John](https://www.youtube.com/watch?v=vLbllFHBQM4) [von](https://youtu.be/Ml3-kVYLNr8?t=42) [Neumann](https://www.youtube.com/watch?v=ZRPoEKHXTJg)\n\n## Content Lists\nIf you prefer browsing the contents of this site through a list instead of a graph, you can find content lists here too:\n\n- [All Notes](notes/)\n- [Setup-related Notes](tags/setup)\n\n\n## [Knowledge](https://www.youtube.com/watch?v=ViDjDy3j-y8) Index\n- [The Odin Project](notes/index-list/the-odin-project.md)\n- [Open Source Society University](notes/index-list/open-source-society-university.md)\n","lastmodified":"2022-05-31T01:01:30.35385037Z","tags":null},"/README":{"title":"","content":"# patchouli-computatrum\n[![66078577_p0_master1200](https://user-images.githubusercontent.com/100863878/169485293-1596dad7-4ff0-4d32-b676-b77226307e90.jpg)](https://www.pixiv.net/en/artworks/66078577)\n\n## Knowledge Index\n- [The Odin Project](notes/the-odin-project/foundations/foundations-summary.md)","lastmodified":"2022-05-31T01:01:30.349850347Z","tags":null},"/content/notes/images/Pasted":{"title":"","content":"","lastmodified":"2022-05-31T01:01:30.35385037Z","tags":null},"/content/notes/images/example.png":{"title":"","content":"","lastmodified":"2022-05-31T01:01:30.35385037Z","tags":null},"/notes/amalgation-of-random-stuff":{"title":"amalgation of random stuff","content":"\n\norganize this raw data and put them into other folders\n\nlevels of explanation\n\nergodic theory, set theory, ordinal theory\n\nlinear programming\n\ntaxi problem\n\nneural networks: mutations, score, generations\n\ncellular automata\n\nprototypes, JavaScript philosophy\n\npythonic\n\ndocker\n\nnetlify\n\n.bin are binary files\n\nquartz\n\ncliffsnotes\n\nplanck units\n\ninfinitesimal\n\nto grok a programming language\n\ngame theory\n\n\n\n-   camelCase: [#twoWords](https://publish.obsidian.md/#twoWords)\n-   PascalCase: [#TwoWords](https://publish.obsidian.md/#TwoWords)\n-   snake_case: [#two_words](https://publish.obsidian.md/#two_words)\n-   kebab-case: [#two-words](https://publish.obsidian.md/#two-words)\n\ncontent delivery network (CDN)\n\ntoml yaml\n\nKubernetes\n\nDevOps\n\nminification and beautification\n\ngranularity\n\ndeployment\n\nwrapper\n\ncurrying\n\nsocratic method\n\ncombinatorics and statistics. permutation. rubiks cube. \n\nGitJournal\n\nfractals\n\nKanban, scrum, agile\n\ngist, gist links to the concepts\n\nmutex\n\nML = Machine Learning\n\nproject Euler\n\nnandtotetris\n\nblind75\n\ncs50\n\nZettelkasten\n\nhelsinki\n\nLaTeX, mathematical notation in markdown\n\nthe interaction between the highest level of hardware and the lowest level of software\n\n%20 = space, what are the other %number examples?\n\nVisual Personal Knowledge Management.\n\n- Philosophy\n\t- Logic\n\t\t- Methods of Reasoning\n\t\t\t- Deductive\n\t\t\t\t- Formal Logic, Science of Deduction\n\t\t\t- Inductive\n\t\t\t\t- Informal Logic, Critical Thinking\n\t\t\t- Abductive\n\t\t\t- Analogical\n\t\t\t- Fallacious\n\nIntuition\n\nAnki\n\nSerendipity\n\n- Data\n\t- Visualization\n\t\t- Flourish app\n\t- Serialization\n\t\t- YAML, JSON, CSV\n\nINI, CFG, TXT\n\nSublime\n\nREST API\n\nFront End Roadmap\n\nBack End Roadmap\n\nFullstack Roadmap\n\nheartbeat\n\nGET and POST\n\n- Project Management\n\t- Minimum Viable Product\n\t- Deadline management\n\t- Avoiding scope creep\n\t- Workflow\n\t\t- Specifications (limit the scope)\n\t\t- Prototyping, Testing\n\t\t- Main branch\n\t\t- Feature branches\n\t\t- Atomic commit\n\t\t- Optimization\n\t\t- Review\n\nUntools\n\nhttps://en.wikipedia.org/wiki/Outline_of_web_design_and_web_development\n\nfirebase\n\ngolang\n\ndjango, flask\n\nR\n\ndesmos\n\nPERN stack\n\nthesaurus for git commit word variety\n\nscribe extension\n\n- Data -\u003e Information -\u003e Knowledge -\u003e Wisdom\n- Observation -\u003e Curation -\u003e Application -\u003e Discernment\n\nweb development is a subset of software development (imagine a circle within a circle)\n\ntypescript is a superset of javascript\n\nsupra,infer,ultra,sub,super\n\nthe difference and relationship between developing, engineering and designing.\n\nsoftware scalability\n\nwebpack\n\ncheatsheets, roadmaps, eli5, analogies and metaphors, \n\nfullstack open\n\naws, azure, google cloud\n\nsre engineer\n\nvim\n\nterraform\n\ndocker\n\nfuzzy search https://docs.emmet.io/css-abbreviations/fuzzy-search/\n\nsemantic html\n\nlanguage agnostic\n\nstochastic, bayesian\n\nstandard deviation\n\nhttps://www.html5rocks.com/en/tutorials/internals/howbrowserswork/\n\ntech lingo\n\ntech debt and software rot\n\nwebgl\n\npipeline\n\nembedded\n\nencapsulation\n\nPATH In windows\n\nLinting is **the automated checking of your source code for programmatic and stylistic errors**. This is done by using a lint tool (otherwise known as linter). A lint tool is a basic static code analyzer. The term linting originally comes from a Unix utility for C.\n\ngithub.io -\u003e heroku.app\n\n\n- education stuff\n\t- https://www.lesswrong.com/posts/NMoLJuDJEms7Ku9XS/guessing-the-teacher-s-password\n\t- montessori\n\t- learning for the sake of learning\n\t- lockharts lament\n\t\t- praises, criticisms\n\nrich text\n\n\n\n\n\n\n\n\n# Sources\nOwn notes\n\n\n","lastmodified":"2022-05-31T01:01:30.35385037Z","tags":null},"/notes/braindump-1":{"title":"golden-ratio","content":"\nactions\n\nAPI\n","lastmodified":"2022-05-31T01:01:30.35385037Z","tags":null},"/notes/braindump-2":{"title":"braindump","content":"\n\nencryption-decryption: XOR'ed, obfuscation, steganography, deobfuscator\n\nlogic gates\n\nNAND gates\n \nu can make anything with just nand\n \nturing complete examples: programming languages. also minecraft, you can use a computer to create a computer inside minecraft.\n \nALU\n \nkarnaugh\n \ngame of life, conway\n \nMAT102\n \nhalf adder and full adder with dominoes?\n \n \n\n \n ","lastmodified":"2022-05-31T01:01:30.35385037Z","tags":null},"/notes/color-theory":{"title":"color-theory","content":"\nwarm and cold\ntritonic\ncolor wheel\ncolor opposites\nRBG,HSV,CYMK\npsychology/symbols/feel\n\n# Sources\nOwn notes\n\n\n\n\n","lastmodified":"2022-05-31T01:01:30.35385037Z","tags":null},"/notes/config":{"title":"","content":"","lastmodified":"2022-05-31T01:01:30.35385037Z","tags":null},"/notes/git":{"title":"git","content":"\nrebase\n\nhead\n\nmerge vs rebase\n\nchange remote: git remote set-url origin ssh\n\n```\nOlder (backwards-compatible) syntax:\n$ git remote rm upstream\nNewer syntax for newer git versions: (* see below)\n$ git remote remove upstream\n```\n\nhttps://www.kernel.org/pub/software/scm/git/docs/git-remote.html\n\n# Sources\nOwn notes\n\n\n\n\n\n","lastmodified":"2022-05-31T01:01:30.35385037Z","tags":null},"/notes/golden-ratio":{"title":"golden-ratio","content":"\nideal proportions\n\nother ratios for screen: 4:3, 16:9.\n# Sources\nOwn notes\n\n\n","lastmodified":"2022-05-31T01:01:30.35385037Z","tags":null},"/notes/google":{"title":"golden-ratio","content":"\nkeyword + site:address\n\n\"\" for exact phrase\n\neli5\n\nx language docs\n\nx datatype/class doing y method\n\nmanuals\n\ntroubleshooting: when u get an error message in the OS, u can copypaste the contents of that error with ctrl+c then paste the error in google ctrl+v\n\nuse OCR for certain languages\n\ngoogle drive has ocr option\n","lastmodified":"2022-05-31T01:01:30.35385037Z","tags":null},"/notes/index-list/open-source-society-university":{"title":"OSSU index","content":"\n- [bytes](notes/open-source-society-university/bytes.md)\n- [abstraction](notes/open-source-society-university/abstraction.md)\n- [math overview](notes/open-source-society-university/math-overview.md)\n\n\n[![Example Image](notes/images/Pasted-image-20220530204524.jpg)](https://www.pixiv.net/en/artworks/54977260)\n\n","lastmodified":"2022-05-31T01:01:30.365850438Z","tags":null},"/notes/index-list/the-odin-project":{"title":"TOP index","content":"\n- [foundations](notes/the-odin-project/foundations/foundations-summary.md)\n- [ruby]()\n- [intermediate html and css]()\n\n[![Example Image](notes/images/Pasted-image-20220530204411.jpg)](https://www.pixiv.net/en/artworks/82220608)\n\n\n\n","lastmodified":"2022-05-31T01:01:30.365850438Z","tags":null},"/notes/introspection":{"title":"introspection","content":"\n\n# Metadata\n2022-05-26 20:26\n\nintrospection\n\n# Content\nA capability of some object-oriented programming languages to determine the type of an object at runtime.\n\n```text\nis_A\nisA\ntype of\ntypeof\nclassName\n```\n\n# Sources\nhttps://stackoverflow.com/questions/tagged/introspection","lastmodified":"2022-05-31T01:01:30.365850438Z","tags":null},"/notes/math-braindump":{"title":"extra stuff","content":"\n\nhttps://en.wikipedia.org/wiki/Principia_Mathematica\n\naxioms\n\nproofs\n\narrow notation, basically what comes after exponentiation\n\nquaternions, what comes after complex numbers\n\nsigma and pi notation\n\naddition is translation, multiplication is rotation\n\neuler angles\n\ngimbal lock\n\nmultiplication loses its associativity\n\neg\n\nj times k is not the same as k times j\n\nif real numbers are one dimensional, then complex numbers are two dimensional\n\ndimensionality: (x) -\u003e (x,y)\n\nthe y part is where i is\n\nhypperreal numbers, for number systems beyond quaternions, math gets a bit odd in here\n\n\nquestion: what was the field of geometry that wasnt euclidean? where the shortest path between A and B wasn't a straight line. rather, it was a curve.","lastmodified":"2022-05-31T01:01:30.365850438Z","tags":null},"/notes/obsidian-plugins":{"title":"obsidian-plugins","content":"\nadvanced tables\n\nExcalidraw\n\nmind map\n\nnatural language dates\n\nobsidian git\n\nozan's image editor in plugin","lastmodified":"2022-05-31T01:01:30.365850438Z","tags":null},"/notes/open-source-society-university/abstraction":{"title":"abstraction","content":"\n\n# Metadata\n2022-05-27 03:12\n\noverview of the layers of abstraction\n\n# Content\n\n\"thousands of layers\" might be a bit of an exaggeration. But that does raise an interesting question. How many layers are there? Here's a (_very_) rough draft. I skip over a lot of complexity and options for simplicity - to make the point and to keep this reasonably readable. I may also have missed a layer or two (**edit** or more - see the replies for lots of great details!) - this is off the top of my head and it's been a long day. Still, enjoy, and maybe some other people can add on and round this out.\n\n-   At the bottom, it's electrons in a circuit.\n    \n-   The circuits are arranged into patterns that happen to execute very simple boolean logic if you watch the inputs and outputs at the right time.\n    \n-   Those simple boolean circuits are built into more complex, integrated circuits that happen to execute more complex mathematical operations - boolean algebra and addition, subtraction, etc.\n    \n-   Those integrated circuits are arranged into modules, grouping them together into useful processors and sub processors.\n    \n-   Those modules are arranged and connected together via a bus, with some inputs and outputs, long-term storage and a clock - now you've got the hardware of a computer!\n    \n\nNow things get interesting - we switch to software layers.\n\n-   This machine is basically a complex calculator. It does nothing unless you tell it to do something via a list of instructions - inputs to put in to various modules and what to do with the outputs.\n    \n-   These instructions are called the Machine Codes - they're particular to this specific machine - they correspond to the specific hardware after all.\n    \n-   They're very low level instructions - usually things like \"add 2 and 5\", etc.\n    \n\nSetting aside how those instructions get written for the moment -\n\n-   On boot-up one of the module has a set of instructions to run - they're basically hardwired (Flash ROM)\n    \n-   Among those instructions are various tests to see what is plugged in (modular hardware!) and if it's functioning properly.\n    \n-   One of the last things that boot ROM does is look for another program to launch - the Operating System.\n    \n-   The OS takes over and starts running things.\n    \n-   The OS provides more complex instructions and a whole new set of abstractions - files, folders, ways to talk to all the hardware that is plugged in, ways to start other programs running, handle their termination, etc.\n    \n-   Those programs are the applications that we run on computers all the time - games, web browsers, email, all the services the OS runs in the background, etc.\n    \n-   Web browsers are particularly interesting - they provide yet another layer of abstraction.\n    \n-   More code can be retrieved from another computer and run within the web browser - HTML to display the page itself, and interpreted languages like Javascript, which make calls to instructions the Web Browser provides.\n    \n-   How the code is retrieved from another computer is also interesting - network communications go through a stack of abstractions all the way down to the hardware level. Check out [the TCP/IP stack](https://www.google.com/search?q=tcp+ip+stack\u0026oq=tcp+ip+stack\u0026aqs=chrome.0.57j0l3j62.2073j0\u0026sourceid=chrome\u0026ie=UTF-8) some time.\n    \n\nBacking up - how does that software get written?\n\n-   One could write the machine code directly - a series of 1's and 0's arranged in a file that the OS can load and run.\n    \n-   But that's wildly tedious and prone to error - there's a lot to do just to get the program to do anything useful and leave the computer in a state that can continue to process.\n    \n-   So people invented languages - first Assembly Language, which is a straight 1:1 mapping to something more human readable than the 1's and 0's.\n    \n-   Then more complex languages that directly express more complex operations than the machine code does - abstract constructs like functions and loops.\n    \n-   Assembly is converted into machine code by an Assembler - a program that does the task of substituting the machine codes for each of the assembly instructions.\n    \n-   More complex languages are compiled - converted from the more abstract language to a set of machine instructions.\n    \n-   Another option is interpreted languages, which are basically compiled at run time - each line converted as it's needed.\n    \n-   One more thing people can do is write Libraries of useful functions - a layer that wraps up the lower-level instructions into a new abstraction that provides a more useful, condensed set of alternate, more complex instructions.\n    \n-   These libraries are chunks of machine code that you can add to your program so you don't have to write them yourself. Open GL is one such library - it provides useful graphics abstractions that let you think in terms of polygons instead of moving numbers into screen memory space and the like.\n    \n\nSo, adding it all up, a program you write will pull in libraries, usually a layer or two of them. Those libraries and some of your code will call through to OS instructions. Those OS instructions are mapped to lower-level instructions (libraries within the OS - it's not a single layer... probably has more than a few layers of its own). Eventually it all gets boiled down into assembly/machine code. That code then runs in the hardware - within a module, on an integrated circuit. And \"runs\" means putting the specified 1's and 0's where they should be when they should be there. Those 1's and 0's are electrical switches - 1 for on, 0 for off. They're fed into the integrated circuits which are themselves composed of lots of lower-level boolean logic gates. Those logic gates are composed of simple transistors.\n\nAll together, call it ... maybe 4 layers before you hit the OS, then another... say 3? 4? 5? before you hit machine code. Then it's modules, integrated chips, logic gates and transistors. Another 4 layers of abstraction. Toss in a couple more for good measure (I'm sure there are some additional physical abstraction layers in there - EEPROMS, and the like), my back-of-the-envelope math puts us in the ballpark of 15... maybe 20 layers from your compiled software to the transistors. Depending on what you're doing, of course.\n\n\n# Sources\n\nhttps://www.reddit.com/r/learnprogramming/comments/1gbe4j/comment/caimx99/?utm_source=share\u0026utm_medium=web2x\u0026context=3","lastmodified":"2022-05-31T01:01:30.365850438Z","tags":null},"/notes/open-source-society-university/bytes":{"title":"bytes","content":"\n\n# Unit of digital information\n0 or 1, 1bit\n\n00 01 10 11 2 bits\n\n...\n\n11111111 8 bits (1 byte)\n\nKiloBytes\n\nMegaBytes\n\nGigaBytes\n\nTeraBytes\n\nPettaBytes\n\nExaBytes\n\nZettaBytes\n\nYottaBytes\n\n```\n0 0\n01 1\n10 2\n11 3\n100 4\n1000 8\n10000 16\n100000 32\n1000000 64\n10000000 128\n11111111 255\n```\n\npower of two\n\noverflow = infinite of x resource in games = negative number\n\n```\n11111111 255 FF\n-1\n```\n\n7F half, nibble\n\nunsigned example 0 to 255\n\nsigned example -127 to 128\n\nword, double word, quad word\n\n2 bytes, 4 bytes, 8 bytes\n\nwhen dealing with multiple bytes: know the endianness\nbig endian and little endian\n\nbig endian: first bytes are the most significant\nlittle endian: last bytes are the most significant\n\n7f is 127 which is 011111111\n\n80 is 128 and notice how that is 100000000\n\nf is last digit in hex so the 7 becomes 8 and f goes back to 0\n\nSince FF is 1 byte which is 8 bits\n\nA bit is 0 or 1 so 8 bits goes from 00000001 to 11111111\n\nUnsigned and signed mean how the first digit is used\n\nIf the first digit is 1 then negative number\n\nIf the first digit is 0 then positive number\n\n\nthe first 4 bytes of any file is the file signature\n\nthe file size of the file is specified somewhere in the first bytes too, but i forgot where","lastmodified":"2022-05-31T01:01:30.365850438Z","tags":null},"/notes/open-source-society-university/math-overview":{"title":"math overview","content":"\n\n# Metadata\n2022-05-27 04:42\n\nTitle: overview of math and programming\n\nAuthor: [Doriel Rivalet](https://github.com/DorielRivalet)\n\nTags: #math #programming #geometry #javascript #ruby #cpp #lua #python #object-oriented-programming\n\n# Content\n\nlet see if i can give my own outline (or rather overview) of math in general in a day, also combine programming with it\n\nlets start with nothing\n\nhow can we represent nothing?\n\nwell u could use the symbol 0, from the arabic numberals\n\nor when talking about sets, u have the empty set {}\n\nlemme grab a LaTeX cheatsheet since i never wrote in math notation in markdown before\n\n$$0$$\n\n$${}$$\n\n```lua\nnil\n```\n\n```javascript\nnull\n```\n\nnow, how can we represent the opposite of nothing, i.e. something? \n\nthe inverse\n\nif we look at one of our hands, we should have 5 fingers. how do we know that we have 5? whats the action that we did to determine that value? counting.\n\n```python\n\nfingersOnHand = 5\n\ndef countFingersOnHand:\n\treturn fingersOnHand\n\nprint(countFingersOnHand()) #returns 5\n```\n\n$$5 = 1+1+1+1+1$$\n\n[i could show why 1+1=2 but showing hundreds of pages for it is not needed for the general overview i'm aiming for](https://en.wikipedia.org/wiki/Principia_Mathematica)\n\nour hand is an object and we iterated through the elements of the object which in this case are our fingers. the act of counting is the iteration.\n\n$$\n\\begin{bmatrix}\n1 \u0026 2 \u0026 3 \u0026 4 \u0026 5\\\\\nthumb \u0026 index \u0026 middle \u0026 ring \u0026 pinky\n\\end{bmatrix}\n$$\n\nwhats the data type we are currently dealing with? integers\n\n10 is the action of doing addition by 1 and iterating 10 times that same operation\n\nwe can do 1+10, 1+11, etc.\n\nwe have addition, whats the inverse of it? subtraction\n\nif we do 1-2 then we get -1, a negative integer\n\nbut how is this represented in computers?\n\nwell, lets start over again\n\nwe have nothing, we can represent it by 0\n\nand we have something, we can represent it by 1\n\nlets call counting with only these two symbols binary counting\n\nbut why is it called binary? well, bi means two. -nary because of the numerical system\n\n0, then 1, then 10\n\nbut why is it going from 1 to 10? because we can only use two symbols\n\nsuppose we use 3 symbols instead: 0, 1 and 2\n\nu would count like this:\n\n0, then 1, then 2, then 10, then 11, then 12, then 20, then 21, and so on\n\ndo u see the pattern?\n\nbut, we use binary for efficiency purposes. (by the way, using 10 symbols would be the decimal system, and 16 symbols the hexadecimal system, which goes from 0 to 1 to 2, ... to 9, then A  which is 10 in decimal, B which is 11 in decimal, ... and finally F which is 15 in decimal)\n\nthe number has to be stored somewhere in the computer.\n\nit has to be stored in memory.\n\nbut what is *it*? information\n\nhow do we represent an unit of information?\n\n[[notes/open-source-society-university/bytes]]\n\nlets allocate 1 byte:\n\n```\nourMemory = 00000000\n```\n\nso now we can currently go from 0 to 15, but what if we want to go from -7 to 7?\n\nwe can make the first digit represent the sign of our number\n\nso for doing operations such as ```4-5```, we can use the int16 struct. but if we aren't dealing with negative integers, then we can use uint16.\n\nso to recapitulate, our current set so far is this:\n\n$${...,-1,0,1,...}$$\n\nand our current operations are addition, represented by +, and subtraction, represented by -\n\ncounting is the action of doing the set above operations on our current set of numbers\n\n$${+,-}$$\n\nwhat if we want to represent multiple additions in a more succinct way?\n\n```lua\nprint(1+1+1+1+1+1+1+1+1+1)\n```\n\n$$ forloop=\\sum_{i=0}^{10} 1$$\n\nimagine i wanted to type the above code, but instead of printing 10 by doing 10 operations, i wanted to do it in 1 operation.\n\n2022-05-28 17:47\n\nlets define a function that does that\n\n$$f(num) = num+num+num+num+num+num+num+num+num+num$$\n\n```ruby\n\ndef multipleAddition(num)\n  puts num.times { |i| print i, \" \"}\nend\n\nmultipleAddition(10)\n```\n\nwhat is num? it stands for number. its a variable.  a variable may represent a [number](https://en.wikipedia.org/wiki/Number \"Number\"), a [vector](https://en.wikipedia.org/wiki/Vector_(mathematics) \"Vector (mathematics)\"), a [matrix](https://en.wikipedia.org/wiki/Matrix_(mathematics) \"Matrix (mathematics)\"), a [function](https://en.wikipedia.org/wiki/Function_(mathematics) \"Function (mathematics)\"), the [argument of a function](https://en.wikipedia.org/wiki/Argument_of_a_function \"Argument of a function\"), a [set](https://en.wikipedia.org/wiki/Set_(mathematics) \"Set (mathematics)\"), or an [element](https://en.wikipedia.org/wiki/Element_(mathematics) \"Element (mathematics)\") of a set. in this case its the argument of a function.\n\nin programming, variables represent a value that is in memory\n\n```text\n\nourMemory = 00000000\nnum = 5\n\nourMemory = num\n\nprint(ourMemory) //returns 00000101\n```\n\nlets create a new operation and represent it by the symbol * and call it multiplication\n\n$$ variable1 * variable2 = (variable1 + variable1 + ...)  variable2 times$$\n\nwhats the inverse of multiplication? division\n\nso now our current operators look like this:\n\n$${-,+,*,/}$$\n\nwhat happens if we do 1/2? we cant compute the result as an integer. what can we do? well, there's a solution: create a new data type\n\nFloats!\n\nLet's create the specifications of a float:\n\n![[notes/images/Pasted image 20220528174638.png]]\n\nnow that we have our new data type, we can expand our numbers set:\n\n$${-1,-0.65345346,0,1,3.1415}$$\n\nnow then, what if we want to represent multiple multiplications in a more succinct way?\n\n```lua\nprint(2*2*2*2*2*2)\n```\n\nimagine i wanted to type the above code, but instead of printing 64 by doing 5 operations, i wanted to do it in 1 operation.\n\nlet's define a function that does that:\n\n$$g(num2) = f(num1) * f(num1) * ... num2 times$$\n\n```cpp\n#include \u003ciostream\u003e\n\nint multipleMultiplication(int num,int exponent){\n  int accumulator = 1;\n\tfor (int i = 0;i \u003c= exponent;i++){\n\t\taccumulator = accumulator * num;\n\t}\n\treturn accumulator;\n}\n\nint main() {\n  int result = multipleMultiplication(2,5);\n  std::cout \u003c\u003c result; //prints 64\n}\n\n```\n\n $$ f(num,exponent)=\\prod_{i=0}^{exponent} num$$\n \n what happens if the exponent isn't an integer but instead a float?\n \n meaning, what if we do $$64^{0.5}$$?\n \n well, that is the same as the square root notation:\n \n$$\\sqrt[2]{64} = 8$$\n\nwhats the inverse of exponentiation? logarithms\n\nwhat if we know the base number, and the number we want to reach, but we dont know the exponent we need? thats what logarithms can be useful for. example:\n\nsuppose we have the number 10, and we want to reach the number 1000, what exponent do we need? 3, because 10 times 10 times 10 is 1000.\n\n$$\\log_{10}{1000} = 3$$\n\n so now we can do quite a bunch of things, but there are two questions that still remain...\n \n 1. what if we want to represent multiple exponentiations in a more succint way?\n 2. what if the number is negative in the square root?\n \nlets start with the first question: what if we want to represent multiple exponentiation in a more succinct way?\n\nwe can already represent quite big and small numbers with exponentiation, but there is also an alternative way to write really small or big numbers: scientific notation\n\n$$m × 10^n$$\n\nor m times ten raised to the power of n, where _n_ is an [integer](https://en.wikipedia.org/wiki/Integer \"Integer\"), and the [coefficient](https://en.wikipedia.org/wiki/Coefficient \"Coefficient\") m is a nonzero [real number](https://en.wikipedia.org/wiki/Real_number \"Real number\") (usually between 1 and 10 in absolute value, and nearly always written as a [terminating decimal](https://en.wikipedia.org/wiki/Decimal \"Decimal\")). The integer n is called the [exponent](https://en.wikipedia.org/wiki/Exponent \"Exponent\") and the real number m is called the [significand](https://en.wikipedia.org/wiki/Significand \"Significand\")or mantissa_.[[1]](https://en.wikipedia.org/wiki/Scientific_notation#cite_note-Calio2017-1) The term \"mantissa\" can be ambiguous where logarithms are involved, because it is also the traditional name of the [fractional part](https://en.wikipedia.org/wiki/Fractional_part \"Fractional part\") of the [common logarithm](https://en.wikipedia.org/wiki/Common_logarithm \"Common logarithm\"). If the number is negative then a minus sign precedes m, as in ordinary decimal notation. In [normalized notation](https://en.wikipedia.org/wiki/Scientific_notation#Normalized_notation), the exponent is chosen so that the [absolute value](https://en.wikipedia.org/wiki/Absolute_value \"Absolute value\") (modulus) of the significand m is at least 1 but less than 10.\n \n so for example, the number 1024, which in binary is ```10000000000```, which in hexadecimal is ```0x400```, which can be a uint16 or int16 datatype, which is $$2^{10}$$; can also be expressed as $$1.024*10^3$$.\n \n but some may ask: we have + for addition, \\* for multiplication and ^ for exponentiation, aren't we missing a symbol (*i.e*, + and \\* and ^) and the action it would represent (*i.e*, addition, multiplication and exponentiation) ?\n \n enter arrow notation:\n \n$$2\\uparrow4 = 2^4 = 16$$\n\none arrow is exponentiation (iterated multiplication), two arrows is tetration (iterated exponentiation)\n\n$$2\\uparrow\\uparrow4 = 2^{2^{2^{2}}} = 2^{16} = 65536 = 0x10000 = 0b10000000000000000$$\n\ntetration: (tetra comes from four, the same way penta comes from five). now we found a pattern: hexa means six, that means hexation would be whats after pentation, and so on. but lets just stick with explaining tetration for now.\n\n```javascript\n\nfunction multipleExponentiation(num, arrows, num2){\n  let accumulator = num;\n\tfor (let i = 0;i \u003c= arrows;i++){\n\t\tfor (let j = 0;j \u003c= num2;j++){\n\t\t\taccumulator *=  num;\n\t\t}\n\t}\n\treturn accumulator;\n}\n\nconsole.log(multipleExponentiation(2,2,4))\n\n```\n\n$$\n\\begin{bmatrix}\n1 \u0026 2 \u0026 3 \u0026 4 \u0026 5\\\\\naddition \u0026 multiplication \u0026 exponentiation \u0026 tetration \u0026 pentation\n\\end{bmatrix}\n$$\n\nlet's answer the second question: what if the number is negative in the square root?\n\n$$\\sqrt[2]{-2}$$\n\nwe can't multiply something times itself and get a negative number, see:\n\n2 times 2, 4. -2 times -2, 4.\n\nbut why is -2 times -2 equal to 4?\n\nlets review our current set of numbers:\n\n$${-1,-0.65345346,0,1,3.1415}$$\n\nif we multiply positive with positive, we go to the right of the number line\n\nif we multiply positive with negative, we go to the left of number line, because the negative changes direction.\n\nif we multiply negative with negative, you change direction twice, so you end up going as the same direction of multiplying two positive numbers.\n\nor explained in another way, multiplying by negative is a 180 degrees rotation, which is also 1pi radian\n\nif u do 180 twice u do a full rotation, and thus, go in the same direction. a 360degrees rotation, or 2pi radian\n\n![[notes/images/Pasted image 20220528204454.png]]\n\nso far our numbers can be drawn on a line that goes from right to left, or left to right, meaning that we are dealing with one dimensional numbers, and the rotations we do can only be by 180. what happens if we create a line thats orthogonal to our current line? meaning, a vertical line. we want a number system that goes right to left, left to right, but also... up or down!\n\n$$ourNumberSystem = \\{right-left,up-down\\}$$\n\nlets call the right-left part the x part, the real numbers. \n\nand the up-down part, the y part.\n\nnow we are dealing with two dimensional numbers!\n\nwhat happens if instead of wanting to do 180 rotations by changing the signs of a number, we want to do rotations of any degree, by changing the signs but also, the y part?\n\nwe are getting close, lets review our current problem:\n\n$$\\sqrt[2]{-1} = 1*x$$\n\nthat x has to be something in the up-down direction...\n\nwe need to do a 90 degree rotation.\n\n$$ourNeededNumber = \\{1,up-down\\}$$\n\nlet's define the unit in the up-down direction as i. and lets call it imaginary number.\n\n$$\\sqrt[2]{-1} = 1i$$\n\nand thus we created the complex plane\n\n![[notes/images/Pasted image 20220528211430.png]]\n\n\n$$i^2 = -1$$\n\nso, real numbers are one-dimensional, and the complex numbers are two-dimensional... what are three dimensional numbers? \n\nIn our C++ and JavaScript programs, we see that loops iterator variables go from i,j,k, and so on\n\nso we need a j unit? well...\n\nwe actually need 4 dimensional numbers.\n\nnotice how in positions of for example video-game objects, those are defined as \n```text\nsword = new Sword(\"Excalibur\");\nsword.position = new Vector3(x,y,z);\n```\n\nwhere position is our variable (which is a property of an instance of the Sword class, which we are accessing with the dot operator), assigned the value (```=```) of an instance(```new```) of a vector3 class(```Vector3```) with arguments x y z (*e.g*, ```10.4,50.3,40.5```)\n\nso, imagine x as i, y as j and z as... k!\n\n$$i^2 = j^2 = k^2 = i.j.k = -1$$\n\n4 dimensional numbers would be something called [quaternions](https://youtu.be/3BR8tK-LuB0?t=287) (quadra meaning four, the same way tetra means four, but from a different language origin, find out which one is greek and which one is latin!), and it introduces 2 more types of numbers: j and k. \n\n(notice how at the [6:20 mark](https://youtu.be/3BR8tK-LuB0?t=380) is related to the concept of [diffuse mode](https://www.theodinproject.com/lessons/foundations-motivation-and-mindset#the-learning-process))\n\nbut what if we want to [go even further beyond](https://www.youtube.com/watch?v=8TGalu36BHA) quaternions, the same way we went from exponentiation to then tetra/penta/hexa-tion with an arbitrary number of arrows?\n\nfortunately, we can use something called the Cayley-Dickson construction\n\nnow, dont be intimated by what that exactly means, just know that for now it allows us to create 2^N dimensional algebras. meaning that we can go from two-dimensional to 4-dimensional to 8-dimensional and so on.\n\noctonions (octo meaning eight) come after quaternions, and so on.\n\nthe further u go on these algebraic structures, the more odd things can get, see:\n\nPassing from the reals to the complex numbers, we lose order; going from the complexes to the quaternions, we lose commutativity of multiplication. If we keep going, we lose associativity of multiplication, in increasing degrees: the sedenions are even less associative than the octonions, etc.\n\ninteresting, isn't it?\n\n# Sources\n\nown notes\n\nhttps://www.geeksforgeeks.org/ruby-integer-times-function-with-example/\n\nhttps://www.geeksforgeeks.org/program-for-nth-fibonacci-number/\n\nhttps://en.wikipedia.org/wiki/Variable_(mathematics)\n\nhttps://en.wikipedia.org/wiki/Single-precision_floating-point_format\n\nhttps://es.overleaf.com/learn/latex/Subscripts_and_superscripts\n\nhttps://en.wikipedia.org/wiki/Logarithm\n\nhttps://en.wikipedia.org/wiki/Tetration\n\nhttps://math.stackexchange.com/questions/1784166/why-are-there-no-triernions-3-dimensional-analogue-of-complex-numbers-quate","lastmodified":"2022-05-31T01:01:30.365850438Z","tags":null},"/notes/quartz/CJK-+-Latex-Support-%E6%B5%8B%E8%AF%95":{"title":"CJK + Latex Support (测试)","content":"\n## Chinese, Japanese, Korean Support\n几乎在我们意识到之前，我们已经离开了地面。\n\n우리가 그것을 알기도 전에 우리는 땅을 떠났습니다.\n\n私たちがそれを知るほぼ前に、私たちは地面を離れていました。\n\n## Latex\n\nBlock math works with two dollar signs `$$...$$`\n\n$$f(x) = \\int_{-\\infty}^\\infty\n    f\\hat(\\xi),e^{2 \\pi i \\xi x}\n    \\,d\\xi$$\n\t\nInline math also works with single dollar signs `$...$`. For example, Euler's identity but inline: $e^{i\\pi} = 0$\n\nAligned equations work quite well:\n\n$$\n\\begin{aligned}\na \u0026= b + c \\\\ \u0026= e + f \\\\\n\\end{aligned}\n$$\n\nAnd matrices\n\n$$\n\\begin{bmatrix}\n1 \u0026 2 \u0026 3 \\\\\na \u0026 b \u0026 c\n\\end{bmatrix}\n$$\n\n## RTL\nMore information on configuring RTL languages like Arabic in the [config](notes/quartz/config.md) page.\n","lastmodified":"2022-05-31T01:01:30.365850438Z","tags":null},"/notes/quartz/config":{"title":"Configuration","content":"\n## Configuration\nQuartz is designed to be extremely configurable. You can find the bulk of the configuration scattered throughout the repository depending on how in-depth you'd like to get.\n\nThe majority of configuration can be be found under `data/config.yaml`. An annotated example configuration is shown below.\n\n```yaml\nname: Your name here! # Shows in the footer\nenableToc: true # Whether to show a Table of Contents\nenableLinkPreview: true # whether to render card previews for links\ndescription: Page description to show to search engines\npage_title: Quartz Example Page # Default Page Title\n\nlinks: # Links to show in footer\n  - link_name: Twitter\n    link: https://twitter.com/_jzhao\n  - link_name: Github\n    link: https://github.com/jackyzha0\n```\n\n### Graph View\nTo customize the Interactive Graph view, you can poke around `data/graphConfig.yaml`.\n\n```yaml\nenableLegend: false # automatically generate a legend\nenableDrag: true # allow dragging nodes in the graph\nenableZoom: true # allow zooming and panning the graph\ndepth: -1 # how many neighbours of the current node to show (-1 is all nodes)\npaths: # colour specific nodes path off of their path\n  - /moc: \"#4388cc\"\n```\n\n\n## Styling\nWant to go even more in-depth? You can add custom CSS styling and change existing colours through editing `assets/styles/custom.scss`. If you'd like to target specific parts of the site, you can add ids and classes to the HTML partials in `/layouts/partials`. \n\n### Partials\nPartials are what dictate what actually gets rendered to the page. Want to change how pages are styled and structured? You can edit the appropriate layout in `/layouts`.\n\nFor example, the structure of the home page can be edited through `/layouts/index.html`. To customize the footer, you can edit `/layouts/partials/footer.html`\n\nMore info about partials on [Hugo's website.](https://gohugo.io/templates/partials/)\n\nStill having problems? Checkout our [FAQ and Troubleshooting guide](notes/quartz/troubleshooting.md).\n\n## Multilingual\n[CJK + Latex Support (测试)](notes/quartz/CJK%20+%20Latex%20Support%20(测试).md) comes out of the box with Quartz.\n\nWant to support languages that read from right-to-left (like Arabic)? Hugo (and by proxy, Quartz) supports this natively.\n\nFollow the steps [Hugo provides here](https://gohugo.io/content-management/multilingual/#configure-languages) and modify your `config.toml`\n\nFor example:\n\n```toml\ndefaultContentLanguage = 'ar'\n[languages]\n  [languages.ar]\n    languagedirection = 'rtl'\n    title = 'مدونتي'\n    weight = 1\n```\n","lastmodified":"2022-05-31T01:01:30.365850438Z","tags":null},"/notes/quartz/custom-Domain":{"title":"Custom Domain","content":"\n### Registrar\nThis step is only applicable if you are using a **custom domain**! If you are using a `\u003cYOUR-USERNAME\u003e.github.io` domain, you can skip this step.\n\nFor this last bit to take effect, you also need to create a CNAME record with the DNS provider you register your domain with (i.e. NameCheap, Google Domains).\n\nGitHub has some [documentation on this](https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site), but the tldr; is to\n\n1. Go to your forked repository (`github.com/\u003cYOUR-GITHUB-USERNAME\u003e/quartz`) settings page and go to the Pages tab. Under \"Custom domain\", type your custom domain, then click **Save**.\n2. Go to your DNS Provider and create a CNAME record that points from your domain to `\u003cYOUR-GITHUB-USERNAME.github.io.` (yes, with the trailing period).\n\n\t![Example Configuration for Quartz](/notes/images/google-domains.png)*Example Configuration for Quartz*\n3. Wait 30 minutes to an hour for the network changes to kick in.\n4. Done!","lastmodified":"2022-05-31T01:01:30.365850438Z","tags":null},"/notes/quartz/editing":{"title":"Editing Content in Quartz","content":"\n## Editing \nQuartz runs on top of [Hugo](https://gohugo.io/) so all notes are written in [Markdown](https://www.markdownguide.org/getting-started/).\n\n### Obsidian\nI recommend using [Obsidian](http://obsidian.md/) as a way to edit and grow your digital garden. It comes with a really nice editor and graphical interface to preview all of your local files.\n\nThis step is **highly recommended**.\n\n🔗 [How to setup your Obsidian Vault to work with Quartz](notes/quartz/obsidian.md)\n\n### Ignoring Files\nOnly want to publish a subset of all of your notes? Don't worry, Quartz makes this a simple two-step process.\n\n❌ [Excluding pages from being published](notes/quartz/ignore%20notes.md)\n\n### Folder Structure\nHere's a rough overview of what's what.\n\n**All content in your garden can found in the `/content` folder.** To make edits, you can open any of the files and make changes directly and save it. You can organize content into any folder you'd like.\n\n**To edit the main home page, open `/content/_index.md`.*\n\nTo create a link between notes in your garden, just create a normal link using Markdown pointing to the document in question. Please note that **all links should be relative to the root `/content` path**. \n\n```markdown\nFor example, I want to link this current document to `notes/config.md`.\n[A link to the config page](notes/config.md)\n```\n\nSimilarly, you can put local images anywhere in the `/content` folder.\n\n```markdown\nExample image (source is in content/notes/images/example.png)\n![Example Image](/content/notes/images/example.png)\n```\n\n### Front Matter\nHugo is picky when it comes to metadata for files. Make sure that your title is double-quoted and that you have a title defined at the top of your file like so. You can also add tags here as well.\n\n```markdown\n---\ntitle: \"Example Title\"\ntags:\n- example-tag\nenableToc: false # do not show a table of contents on this page\n---\n\nRest of your content here...\n```\n\n## Previewing Changes\nThis step is purely optional and mostly for those who want to see the published version of their digital garden locally before opening it up to the internet. This is *highly recommended* but not required.\n\n👀 [Preview Quartz Changes](notes/quartz/preview%20changes.md)\n\nFor those who like to live life more on the edge, viewing the garden through Obsidian gets you pretty close to the real thing.\n\n## Publishing Changes\nNow that you know the basics of managing your digital garden using Quartz, you can publish it to the internet!\n\n🌍 [Hosting Quartz online!](notes/quartz/hosting.md)\n\nHaving problems? Checkout our [FAQ and Troubleshooting guide](notes/quartz/troubleshooting.md).\n","lastmodified":"2022-05-31T01:01:30.365850438Z","tags":null},"/notes/quartz/hosting":{"title":"Deploying Quartz to the Web","content":"\n## GitHub Pages\nQuartz is designed to be effortless to deploy. If you forked and cloned Quartz directly from the repository, everything should already be good to go! Follow the steps below.\n\n### Enable GitHub Actions\nBy default, GitHub disables workflows from running automatically on Forked Repostories. Head to the 'Actions' tab of your forked repository and Enable Workflows to setup deploying your Quartz site!\n\n![Enable GitHub Actions](notes/images/github-actions.png)*Enable GitHub Actions*\n\n### Enable GitHub Pages\n\nHead to the 'Settings' tab of your forked repository and go to the 'Pages' tab.\n\n1. (IMPORTANT) Set the source to deploy from `master` (and not `hugo`) using `/ (root)`\n2. Set a custom domain here if you have one!\n\n![Enable GitHub Pages](/notes/images/github-pages.png)*Enable GitHub Pages*\n\n### Pushing Changes\nTo see your changes on the internet, we need to push it them to GitHub. Quartz is a `git` repository so updating it is the same workflow as you would follow as if it were just a regular software project.\n\n```shell\n# Navigate to Quartz folder\ncd \u003cpath-to-quartz\u003e\n\n# Commit all changes\ngit add .\ngit commit -m \"message describing changes\"\n\n# Push to GitHub to update site\ngit push origin hugo\n```\n\nNote: we specifically push to the `hugo` branch here. Our GitHub action automatically runs everytime a push to is detected to that branch and then updates the `master` branch for redeployment.\n\n### Setting up the Site\nNow let's get this site up and running. Never hosted a site before? No problem. Have a fancy custom domain you already own or want to subdomain your Quartz? That's easy too.\n\nHere, we take advantage of GitHub's free page hosting to deploy our site. Change `baseURL` in `/config.toml`.\n\nMake sure that your `baseURL` has a trailing `/`!\n\n[Reference `config.toml` here](https://github.com/jackyzha0/quartz/blob/hugo/config.toml)\n\n```toml\nbaseURL = \"https://\u003cYOUR-DOMAIN\u003e/\"\n```\n\nIf you are using this under a subdomain (e.g. `\u003cYOUR-GITHUB-USERNAME\u003e.github.io/quartz`), include the trailing `/`.\n\n```toml\nbaseURL = \"https://\u003cYOUR-GITHUB-USERNAME\u003e.github.io/quartz/\"\n```\n\nChange `cname` in `/.github/workflows/deploy.yaml`. Again, if you don't have a custom domain to use, you can use `\u003cYOUR-USERNAME\u003e.github.io`.\n\nPlease note that the `cname` field should *not* have any path `e.g. end with /quartz` or have a trailing `/`.\n\n[Reference `deploy.yaml` here](https://github.com/jackyzha0/quartz/blob/hugo/.github/workflows/deploy.yaml)\n\n```yaml\n- name: Deploy  \n  uses: peaceiris/actions-gh-pages@v3  \n  with:  \n\tgithub_token: ${{ secrets.GITHUB_TOKEN }} # this can stay as is, GitHub fills this in for us!\n\tpublish_dir: ./public  \n\tpublish_branch: master\n\tcname: \u003cYOUR-DOMAIN\u003e\n```\n\nHave a custom domain? [Learn how to set it up with Quartz ](notes/quartz/custom%20Domain.md).\n\n---\n\nNow that your Quartz is live, let's figure out how to make Quartz really *yours*!\n\n🎨 [Customizing Quartz](notes/quartz/config.md)\n\nHaving problems? Checkout our [FAQ and Troubleshooting guide](notes/quartz/troubleshooting.md).\n","lastmodified":"2022-05-31T01:01:30.365850438Z","tags":null},"/notes/quartz/ignore-notes":{"title":"Ignoring Notes","content":"\n### Quartz Ignore\nEdit `ignoreFiles` in `config.toml` to include paths you'd like to exclude from being rendered.\n\n```toml\n...\nignoreFiles = [  \n    \"/content/templates/*\",  \n    \"/content/private/*\", \n    \"\u003cyour path here\u003e\"\n]\n```\n\n`ignoreFiles` supports the use of Regular Expressions (RegEx) so you can ignore patterns as well (e.g. ignoring all `.png`s by doing `\\\\.png$`).\nTo ignore a specific file, you can also add the tag `draft: true` to the frontmatter of a note.\n\n```markdown\n---\ntitle: Some Private Note\ndraft: true\n---\n...\n```\n\nMore details in [Hugo's documentation](https://gohugo.io/getting-started/configuration/#ignore-content-and-data-files-when-rendering).\n\n### Global Ignore\nHowever, just adding to the `ignoreFiles` will only prevent the page from being access through Quartz. If you want to prevent the file from being pushed to GitHub (for example if you have a public repository), you need to also add the path to the `.gitignore` file at the root of the repository.","lastmodified":"2022-05-31T01:01:30.365850438Z","tags":null},"/notes/quartz/obsidian":{"title":"Obsidian Vault Integration","content":"\n## Setup\nObsidian is the preferred way to use Quartz. You can either create a new Obsidian Vault or link one that your already have.\n\n### New Vault\nIf you don't have an existing Vault, [download Obsidian](https://obsidian.md/) and create a new Vault in the `/content` folder that you created and cloned during the [setup](notes/quartz/setup.md) step.\n\n### Linking an existing Vault\nThe easiest way to use an existing Vault is to copy all of your files (directory and hierarchies intact) into the `/content` folder.\n\n## Settings\nGreat, now that you have your Obsidian linked to your Quartz, let's fix some settings so that they play well.\n\n1. Under Options \u003e Files and Links, set the New link format to always use Absolute Path in Vault.\n2. Go to Settings \u003e Files \u0026 Links \u003e Turn \"on\" automatically update internal links.\n\n![Obsidian Settings](/notes/images/obsidian-settings.png)*Obsidian Settings*\n\n## Templates\nInserting front matter everytime you want to create a new Note gets annoying really quickly. Luckily, Obsidian supports templates which makes inserting new content really easily.\n\n**If you decide to overwrite the `/content` folder completely, don't remove the `/content/templates` folder!**\n\nHead over to Options \u003e Core Plugins and enable the Templates plugin. Then go to Options \u003e Hotkeys and set a hotkey for 'Insert Template' (I recommend `[cmd]+T`). That way, when you create a new note, you can just press the hotkey for a new template and be ready to go!\n","lastmodified":"2022-05-31T01:01:30.365850438Z","tags":null},"/notes/quartz/philosophy":{"title":"Quartz Philosophy","content":"\n\u003e “[One] who works with the door open gets all kinds of interruptions, but [they] also occasionally gets clues as to what the world is and what might be important.” — Richard Hamming\n\n## Why Quartz?\nHosting a public digital garden isn't easy. There are an overwhelming number of tutorials, resources, and guides for tools like [Notion](https://www.notion.so/), [Roam](https://roamresearch.com/), and [Obsidian](https://obsidian.md/), yet none of them have super easy to use *free* tools to publish that garden to the world.\n\nI've personally found that\n1. It's nice to access notes from anywhere\n2. Having a public digital garden invites open conversations\n3. It makes keeping personal notes and knowledge *playful and fun*\n\nI was really inspired by [Bianca](https://garden.bianca.digital/) and [Joel](https://joelhooks.com/digital-garden)'s digital gardens and wanted to try making my own.\n\n**The goal of Quartz is to make hosting your own public digital garden free and simple.** You don't even need your own website. Quartz does all of that for you and gives your own little corner of the internet.\n","lastmodified":"2022-05-31T01:01:30.365850438Z","tags":null},"/notes/quartz/preview-changes":{"title":"Preview Changes","content":"\nIf you'd like to preview what your Quartz site looks like before deploying it to the internet, here's exactly how to do that!\n\nNote that both of these steps need to be completed.\n\n## Install `hugo-obsidian`\nThis step will generate the list of backlinks for Hugo to parse. Ensure you have [Go](https://golang.org/doc/install) (\u003e= 1.16) installed.\n\n```shell\n# Install and link `hugo-obsidian` locally\n$ go install github.com/jackyzha0/hugo-obsidian@latest\n\n# Navigate to your local Quartz folder\n$ cd \u003clocation-of-your-local-quartz\u003e\n\n# Scrape all links in your Quartz folder and generate info for Quartz\n$ hugo-obsidian -input=content -output=assets/indices -index -root=.\n```\n\nIf you are running into an error saying that `command not found: hugo-obsidian`, make sure you set your `GOPATH` correctly! This will allow your terminal to correctly recognize hugo-obsidian as an executable.\n\nAfterwards, start the Hugo server as shown above and your local backlinks and interactive graph should be populated!\n\n##  Installing Hugo\nHugo is the static site generator that powers Quartz. [Install Hugo with \"extended\" Sass/SCSS version](https://gohugo.io/getting-started/installing/) first. Then,\n\n```\n# Navigate to your local Quartz folder\n$ cd \u003clocation-of-your-local-quartz\u003e\n\n# Start local server\n$ hugo server\n\n# View your site in a browser at http://localhost:1313/\n```\n","lastmodified":"2022-05-31T01:01:30.365850438Z","tags":null},"/notes/quartz/setup":{"title":"Setup","content":"\n## Making your own Quartz\nSetting up Quartz requires a basic understanding of `git`. If you are unfamiliar, [this resource](https://resources.nwplus.io/2-beginner/how-to-git-github.html) is a great place to start!\n\n### Forking\n\u003e A fork is a copy of a repository. Forking a repository allows you to freely experiment with changes without affecting the original project.\n\nNavigate to the GitHub repository for the Quartz project:\n\n📁 [Quartz Repository](https://github.com/jackyzha0/quartz)\n\nThen, Fork the repository into your own GitHub account. If you don't have an account, you can make on for free [here](https://github.com/join). More details about forking a repo can be found on [GitHub's documentation](https://docs.github.com/en/get-started/quickstart/fork-a-repo).\n\n### Cloning\nAfter you've made a fork of the repository, you need to download the files locally onto your machine. Ensure you have `git`, then type the following command replacing `YOUR-USERNAME` with your GitHub username.\n\n```shell\n$ git clone https://github.com/YOUR-USERNAME/quartz\n```\n\n## Editing\nGreat! Now you have everything you need to start editing and growing your digital garden. If you're ready to start writing content already, check out the recommended flow for editing notes in Quartz.\n\n✏️ [Editing Notes in Quartz](notes/quartz/editing.md)\n\nHaving problems? Checkout our [FAQ and Troubleshooting guide](notes/quartz/troubleshooting.md).\n\n## Updating\nHaven't updated Quartz in a while and want all the cool new optimizations? On Unix/Mac systems you can run the following command for a one-line update! This command will show you a log summary of all commits since you last updated, press `q` to acknowledge this. Then, it will show you each change in turn and press `y` to accept the patch or `n` to reject it. Usually you should press `y` for most of these unless it conflicts with existing changes you've made! \n\n```shell\nmake update\n\n# or, if you don't want the interactive parts and just want the update\nmake update-force\n```\n\nOr, manually checkout the changes yourself.\n\n\u003e ⚠️ **WARNING** ⚠️\n\u003e\n\u003e If you customized the files in `data/`, or anything inside `layouts/`, your customization may be overwritten!\n\u003e Make sure you have a copy of these changes if you don't want to lose them.\n\n\n```shell\n# add Quartz as a remote host\ngit remote add upstream git@github.com:jackyzha0/quartz.git\n\n# index and fetch changes\ngit fetch upstream\ngit checkout -p upstream/hugo -- layouts .github Makefile assets/js assets/styles/base.scss assets/styles/darkmode.scss config.toml data \n```\n","lastmodified":"2022-05-31T01:01:30.365850438Z","tags":null},"/notes/quartz/showcase":{"title":"Showcase","content":"\nWant to see what Quartz can do? Here are some cool community gardens :)\n\n- [Quartz Documentation (this site!)](https://quartz.jzhao.xyz/)\n- [Jacky Zhao's Garden](https://garden.jzhao.xyz/)\n- [AWAGMI Intern Notes](https://notes.awagmi.xyz/)\n- [Shihyu's PKM](https://shihyuho.github.io/pkm/)\n- [Chloe's Garden](https://garden.chloeabrasada.online/)\n- [SlRvb's Site](https://slrvb.github.io/Site/)\n- [Course notes for Information Technology Advanced Theory](https://a2itnotes.github.io/quartz/)\n- [Brandon Boswell's Garden](https://brandonkboswell.com)\n- [Siyang's Courtyard](https://siyangsun.github.io/courtyard/)\n\nIf you want to see your own on here, submit a [Pull Request adding yourself to this file](https://github.com/jackyzha0/quartz/blob/hugo/content/notes/showcase.md)!\n","lastmodified":"2022-05-31T01:01:30.365850438Z","tags":null},"/notes/quartz/troubleshooting":{"title":"Troubleshooting and FAQ","content":"\nStill having trouble? Here are a list of common questions and problems people encounter when installing Quartz.\n\nWhile you're here, join our [Discord](https://discord.gg/cRFFHYye7t) :)\n\n### Does Quartz have Latex support?\nYes! See [CJK + Latex Support (测试)](notes/quartz/CJK%20+%20Latex%20Support%20(测试).md) for a brief demo.\n\n### Can I use \\\u003cObsidian Plugin\\\u003e in Quartz?\nUnless it produces direct Markdown output in the file, no. There currently is no way to bundle plugin code with Quartz.\n\nThe easiest way would be to add your own HTML partial that supports the functionality you are looking for.\n\n### My GitHub pages is just showing the README and not Quartz\nMake sure you set the source to deploy from `master` (and not `hugo`) using `/ (root)`! See more in the [hosting](notes/quartz/hosting.md) guide\n\n### Some of my pages have 'January 1, 0001' as the last modified date\nThis is a problem caused by `git` treating files as case-insensitive by default and some of your posts probably have capitalized file names. You can turn this off in your Quartz by running this command.\n\n```shell\n# in the root of your Quartz (same folder as config.toml)\ngit config core.ignorecase true\n\n# or globally (not recommended)\ngit config --global core.ignorecase true\n```\n\n### Can I publish only a subset of my pages?\nYes! Quartz makes selective publishing really easy. Heres a guide on [excluding pages from being published](notes/quartz/ignore%20notes.md).\n\n### Can I host this myself and not on GitHub Pages?\nYes! All built files can be found under `/public` in the `master` branch. More details under [hosting](notes/quartz/hosting.md).\n\n### `command not found: hugo-obsidian`\nMake sure you set your `GOPATH` correctly! This will allow your terminal to correctly recognize `hugo-obsidian` as an executable.\n\n```shell\n# Add the following 2 lines to your ~/.bash_profile\nexport GOPATH=/Users/$USER/go\nexport PATH=$GOPATH/bin:$PATH\n\n# In your current terminal, to reload the session\nsource ~/.bash_profile\n```\n\n### How come my notes aren't being rendered?\nYou probably forgot to include front matter in your Markdown files. You can either setup [Obsidian](notes/quartz/obsidian.md) to do this for you or you need to manually define it. More details in [the 'how to edit' guide](notes/quartz/editing.md).\n\n### My custom domain isn't working!\nWalk through the steps in [the hosting guide](notes/quartz/hosting.md) again. Make sure you wait 30 min to 1 hour for changes to take effect.\n\n### How do I setup Google Analytics?\nYou can edit it in `config.toml` and either use a V3 (UA-) or V4 (G-) tag.\n\n### How do I change the content on the home page?\nTo edit the main home page, open `/content/_index.md`.\n\n### How do I change the colours?\nYou can change the theme by editing `assets/custom.scss`. More details on customization and themeing can be found in the [customization guide](notes/quartz/config.md).\n\n### How do I add images?\nYou can put images anywhere in the `/content` folder.\n\n```markdown\nExample image (source is in content/notes/images/example.png)\n![Example Image](/content/notes/images/example.png)\n```\n\n### My Interactive Graph and Backlinks aren't up to date\nBy default, the `linkIndex.json` (which Quartz needs to generate the Interactive Graph and Backlinks) are not regenerated locally. To set that up, see the guide on [local editing](notes/quartz/editing.md)\n\n### Can I use React/Vue/some other framework?\nNot out of the box. You could probably make it work by editing `/layouts/_default/single.html` but that's not what Quartz is designed to work with. 99% of things you are trying to do with those frameworks you can accomplish perfectly fine using just vanilla HTML/CSS/JS.\n\n## Still Stuck?\nQuartz isn't perfect! If you're still having troubles, file an issue in the GitHub repo with as much information as you can reasonably provide. Alternatively, you can message me on [Twitter](https://twitter.com/_jzhao) and I'll try to get back to you as soon as I can.\n\n🐛 [Submit an Issue](https://github.com/jackyzha0/quartz/issues)","lastmodified":"2022-05-31T01:01:30.365850438Z","tags":null},"/notes/repo-setup":{"title":"repo-setup","content":"\n\n2022-05-25 21:55\n\n### **Quick setup** — if you’ve done this kind of thing before\n\n**or**\n\nHTTPS\n\nSSH\n\nGet started by [creating a new file]() or [uploading an existing file](). We recommend every repository include a [README](), [LICENSE](), and [.gitignore]().\n\n### …or create a new repository on the command line\n\necho \"# reponame\" \u003e\u003e README.md\ngit init\ngit add README.md\ngit commit -m \"first commit\"\ngit branch -M main\ngit remote add origin git@github.com:name/reponame.git\ngit push -u origin main\n\n### …or push an existing repository from the command line\n\ngit remote add origin git@github.com:name/reponame.git\ngit branch -M main\ngit push -u origin main\n\n### …or import code from another repository\n\nYou can initialize this repository with code from a Subversion, Mercurial, or TFS project.\n\n\n# Sources\n\nhttps://docs.github.com/en/get-started/importing-your-projects-to-github/importing-source-code-to-github/adding-locally-hosted-code-to-github","lastmodified":"2022-05-31T01:01:30.365850438Z","tags":null},"/notes/the-odin-project/foundations/202205240651-the-back-end":{"title":"202205240651 The Back-End","content":"\n\n# The Back-End\n\n- PHP, ASP.NET, Ruby, Python and Java\n\n- Web Design\n\t- Photoshop and Fireworks\n\n- Jquery is a compiled library of JS\n\nBrowser: JS+CSS+HTML\n\nBackend: Server, Application, Database\nThe server holds the database\n-   The server. This is the computer that receives requests.\n-   The app. This is the application running on the server that listens for requests, retrieves information from the database, and sends a response.\n-   The database. Databases are used to organize and persist data.\n\nThe pair of an HTTP verb and a URI is called a _route_ and matching them based on a request is called _routing_.\n\nExpress: simplifies routing\n\nFrameworks: [Ruby on Rails](http://teamtreehouse.com/library/build-a-simple-ruby-on-rails-application#getting-started-with-rails \"Learn to Code Ruby on Rails\"), Cake PHP, and Code Ignite\n\nWordpress: frontend+backend. WordPress is an open-sourced framework built on PHP that you have to install on your server with a database. use CSS, jQuery and JavaScript.\n\n-   [What is back-end development?](https://techterms.com/definition/backend)\n-   [How many parts does the backend consist of?](https://www.codecademy.com/articles/back-end-architecture/)\n-   [Name each part of the backend.](https://www.codecademy.com/articles/back-end-architecture)\n-   [Where does the backend store its data?](https://www.codecademy.com/articles/back-end-architecture)\n\nData persistence of a website.\n\nBack-end development is a field of development concerning the use of databases, application and servers, which aren't seen by the end user (In contrast, front-end development focuses on what the end user sees, such as the contents (HTML), style (CSS) and interactivity (JavaScript) of a website. \n\n# Sources\nOwn notes\n\nhttps://www.theodinproject.com/lessons/foundations-introduction-to-the-back-end","lastmodified":"2022-05-31T01:01:30.365850438Z","tags":null},"/notes/the-odin-project/foundations/202205240812-frameworks":{"title":"202205240812 Frameworks","content":"\n\n# Frameworks\nExpress is a JavaScript framework\n\nVanilla JavaScript is referring to programming in JavaScript without the use of any framework.\n\nAnalogy: programming languages are like hammers and wrenches, the brand of those tools are the frameworks. If you don't know how to use a hammer then it also means knowing what brand it is isn't of much help either, so first you need to learn how to use a hammer in general.\n\nImagine you make lots of websites and you notice that the way you make most of those websites follow a specific programming pattern (framework) or repeat a certain group of functions (library). You could then, design or adopt a framework/library that speeds up the development process of making such websites.\n\nEssentially, frameworks add another level of abstraction. But if you don't understand the level of abstraction that's below it, then it makes it harder to know what/how to do certain things when problems arise, such as caused by a lack of optimization.\n\nI assume NoCode is the highest level of abstraction at the moment?\n\nBootstrap is a helpful framework for managing HTML and CSS.\n\nNode.js, a JavaScript runtime, is also used for backend programming.\n\nScaffolding\n\n-   MySQL (relational)\n-   PostgreSQL (relational)\n-   MongoDB (non-relational, document)\n\ntest-driven development approach, which implies that testing goes first and coding comes after.\n\n{{ variable_name }}\n{% expression %}\n\n```html\n\u003c!DOCTYPE html\u003e\n\u003chtml lang=\"en\"\u003e\n\u003cbody\u003e\n\n {% if youngest_teams %}\n    \u003cul\u003e\n    {% for team in youngest_teams %}\n        \u003cli\u003e{{ team.team_name }}\u003c/li\u003e\n    {% endfor %}\n    \u003c/ul\u003e\n{% else %}\n    \u003cp\u003eNo teams are available.\u003c/p\u003e\n{% endif %}\n\n\u003c/body\u003e\n\u003c/html\u003e\n```\n\n\n# Sources\nOwn notes\n\nhttps://www.theodinproject.com/lessons/foundations-introduction-to-frameworks\n\nhttps://stackoverflow.com/questions/148747/what-is-the-difference-between-a-framework-and-a-library\n\nhttps://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller\n\nhttp://stackoverflow.com/questions/4507506/what-is-a-web-framework-how-does-it-compare-with-lamp","lastmodified":"2022-05-31T01:01:30.369850461Z","tags":null},"/notes/the-odin-project/foundations/202205242345-ip-addresses":{"title":"202205242345 ip adresses","content":"\n\nip adresses, dns, etc\n\n# Analogy\n- IP Address: phone number\n\t- Ipv4 or IPv6\n\t- 127.0.0.1 is local\nDomain name: person name\n\t-*e.g.*, google.com\nDNS: the contacts book/app\n\n\nhttps://dorielrivalet.github.io/calculator/index.html\nscheme://domain/path/resource\n\nhypertext transfer protocol secure \n\n1.  You type a URL in your browser and press Enter\n2.  Browser looks up IP address for the domain\n3.  Browser initiates TCP connection with the server\n4.  Browser sends the HTTP request to the server\n5.  Server processes request and sends back a response\n6.  Browser renders the content\n\n\n# Sources\n\nhttps://aws.amazon.com/blogs/mobile/what-happens-when-you-type-a-url-into-your-browser/#:~:text=You%20type%20a%20URL%20in,HTTP%20request%20to%20the%20server","lastmodified":"2022-05-31T01:01:30.369850461Z","tags":null},"/notes/the-odin-project/foundations/document-object-model":{"title":"Document Object Model","content":"\n# Metadata\n\n2022-05-21 16:00\n\n# Glossary\n- HTML Element -\u003e DOM Node\n- JavaScript manipulates the DOM nodes\n- Manipulation: modifying attributes, creation, deletion\n\n# Deduction\n\n- A DOM Node is an object that represents HTML Elements\n\n- An object has attributes and methods\n\n- We access the attributes via indexing, the notation can be something such as objectName.attributeName\n\n- Conclusion: This means a DOM Node could have things such as .disabled\n\n- .disabled sounds like an attribute/property that has a boolean value\n\n- true or false, if domNodeName.disabled == true then the DOM Node is disabled.\n\n```javascript\n\nconst element = document.querySelector(\".className\");\ntypeof element // Look at what this outputs\nconsole.dir(element) // This gives you a list of all the properties the object reporesenting the element contains. Look at this as well I recommend ASU'S courses on precalculus and the preceeeding one on college algebra oboth available on edx. They use some software that tests your initial  knowledgfe and from them recommend you material to learn, very nice for gap-filling.\n\n```\n\nRemember: use ```defer``` in the HTML script tag to wait for everything to load.\n\n# Sources: \n- The Odin Project Discord Server\n- Own notes","lastmodified":"2022-05-31T01:01:30.369850461Z","tags":null},"/notes/the-odin-project/foundations/foundations-summary":{"title":"foundations summary","content":"\n- [[notes/the-odin-project/foundations/internet-infrastructure]]\n  - Client and server, packets.\n  - Web page -\u003e Website -\u003e Web Server\n  - IP Address -\u003e Router -\u003e ISP\n  - Domain Name Servers\n  - TCP and UDP\n- Virtual Machines\n- Programming in general\n  - [**Problem Solving (most important concept)**](https://www.theodinproject.com/lessons/foundations-problem-solving)\n    - Divide and conquer approach\n    - How to ask good questions\n    - Pseudocode\n  - Compiler\n    - Lexical analyzer\n      - Tokens and lexemes\n        - Reserved words, Operators, Identifiers, Constants, Separators\n        - Example:\n\n        ```lua\n              newvalue = oldvalue + rate * 60\n\n        --[[  Token             Lexeme\n              Identifier      newvalue\n              assignOperation        =\n              Identifier      oldvalue\n              addOperation           +\n              identifier          rate\n              mulOperation           *\n              number                 6\n        ]] \n        ```\n\n  - Literals\n  - Variables\n    - Declaration and assignment\n    - Data types\n      - Enumeration (enum)\n      - Primitive\n        - Boolean [(which is stored as 1 byte instead of 1 bit)](https://softwareengineering.stackexchange.com/questions/185104/why-is-a-boolean-value-stored-as-a-byte-inside-of-a-computer-when-it-only-requir)\n          - Falsy and truthy values\n        - Integer\n          - 2 [bytes](notes/open-source-society-university/bytes.md)\n            - short, int16\n            - unsigned short, uint16\n          - 4 bytes\n            - signed integer, int32\n            - unsigned integer, uint32\n            - float\n          - 8 bytes\n            - double\n        - Char and String\n          - String manipulation\n          - String concatenation `('a'+'b')`\n          - String interpolation`('${a} {b}')`\n          - Escaping `(/)`\n      - Composite\n        - Object `{}`\n        - Array `[]`\n  - Operators\n    - Logical\n      - `AND`(and, \u0026\u0026, ∧, ·, \u0026), `OR`(or, ∥, ||, ∨, +), `NOT`(not,¬, ~, !), `XOR`(exclusive or, ↮, ⊕, ⊻, ≢. Either x or y is true, and not both true), `NAND`(not and, ⊼, !(x \u0026\u0026 y)), `NOR`(not or, ⊽, !(x || y))\n    - Comparison\n      - `\u003e`(greater than), `\u003c`(lesser than), `\u003e=`(greater or equal than), `\u003c=`(lesser or equal than), `==`(equals), `!=`(not equals)\n    - Ternary operator: `(condition) ? IfTrue : IfFalse`\n  - Functions\n    - Invocation, calls. `functionName()`\n    - Arguments and parameters `function foo(parameters){}; foo(arguments)`\n    - Recursion `function bar(){ if (condition) return; bar()}\n    - Nesting `function f(g())`\n    - Coroutines\n    - Scope. Environment.\n    - Stack trace\n    - [Varargs `(...)`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters)\n  - Passing data\n    - Pass by *value*: passing the *data* itself.\n    - Pass by *reference*: pass the *variable* that references the data.\n    - Pass by *share*: pass the *reference* itself, sharing the memory location the variable uses (this is the way JavaScript handles assignments and function parameters).\n  - Language Paradigms\n    - Functional (*e.g.*, Haskell)\n    - Procedural, Imperative, Event-driven (*e.g.*, JavaScript)\n      - Event listeners\n        - Callback functions\n        - Adding and removing\n          - Memory leaks\n            - Garbage collection\n    - Object-oriented (*e.g.*, Java)\n      - Classes\n        - Instance\n        - Inheritance\n        - Singleton\n        - Properties, Methods and Events\n    - Multi-paradigm\n  - Abstraction\n    - Examples: Analog -\u003e Digital -\u003e Binary -\u003e Hexadecimal -\u003e Assembly -\u003e C -\u003e C++ -\u003e Java -\u003e JavaScript. From standard libraries to custom frameworks. Literals (`1`) to Variables (`a := 1`) to Objects (`obj := {a: 1}`) to Classes (`a = object.New(\"Class\");a:ChangeValue(1)`).\n  - Learning\n    - Concepts\n      - Reading documentation\n      - Asking in communities\n      - Analyzing other's code\n      - Implementing proof of concepts (POCs)\n    - [Strategies](https://www.theodinproject.com/lessons/foundations-motivation-and-mindset)\n      - Active and passive learning\n      - Focus mode and diffuse mode\n      - Grit and motivation\n      - Fixed vs growth mindset\n      - Avoiding rabbit holes and information overload. Patience.\n      - Creating analogies, linking to existing ideas, reformulation and recitation.\n      - [Flow mental state](https://en.wikipedia.org/wiki/Flow_(psychology)\n      - Mentoring, helping others.\n\t\t  - Not by showing solutions outright, but by giving direction.\n  - **Data structures**\n    - Arrays\n      - Push and pop\n    - Lists\n      - Key and value pairs\n    - Dictionaries and tables\n      - Indexing, retrieving, insertion `tableName.keyName, tableName[\"Key Name\"]`\n  - **Algorithms**\n    - Time Complexity\n      - Notation\n        - Big O `O(n) example: for element in list`\n    - Sorting data\n    - Binary search\n    - Loops\n      - `for`\n        - Numeric: `for i=start, end, step`\n        - Generic: `for element in list`\n      - `while`, `repeat` or `do while`\n      - Nesting `for i=start,end,step {for j=start,end,step}`\n      - Flow control\n        - `break` (the current loop)\n        - `continue` (to the next iteration)\n    - Conditionals\n      - `if` `else` `else if`\n      - `switch`\n      - Nesting\n  - Regular Expressions (Regex) `\\[A-Z]\\g+`\n  - Modules, Libraries, Frameworks\n  - Experience terms: Trainee, Junior (JR), Semi-Senior (SSR), Senior (SR)\n  - Field of development terms\n    - Front-End\n      - Graphical User Interfaces (GUI), User Experience (UX), Graphic Design, Interactivity\n    - Back-End\n      - Databases, Data Persistence, Schema, Reliability\n    - DevOps\n      - Deployment, Connectivity\n      - GitHub Actions\n\t\t  - Workflows\n\t\t  - Keys\n\t\t  - Secrets\n\t\t  - Tokens\n    - Full-Stack\n      - Integrity, Synergy, Compatibility\n      - Stack Initials\n        - LAMP (Linux + Apache + MySQL + PHP)\n        - MERN (MongoDB + Express + React + Node.js)\n        - MEAN (MongoDB + Express + Angular + Node.js)\n        - MEVN (MongoDB + Express + Vue + Node.js)\n  - Code style\n    - Case\n      - `camelCase`, `PascalCase`\n    - Design patterns\n      - Creational, structural, behavioral, concurrency\n      - Don't Repeat Yourself (DRY) principle\n        - Refactoring\n      - Anti-patterns\n    - Readability\n\t\t- Cognitive load/strain\n      - Self-documenting code\n    - Source code comments\n  - Integrated Development Environments (IDEs)\n    - *e.g.,* Visual Studio Code, Eclipse\n  - People\n    - Alan Turing, George Boole, John von Neumann, Ada Lovelace\n- Debugging\n  - Chrome Developer Tools\n    - Inspector\n    - Breakpoints\n\t\t- Steps\n    - Console\n    - Device Mode\n  - `print`/`console`, `error` and `warn` functions\n  - Static analysis programs\n    - ESLint, semgrep\n  - Test Driven Development (TDD)\n    - Tools\n      - Jest\n- Markup languages\n  - HTML (.html)\n    - Elements and tags\n  - Markdown (.md)\n    - Formatting\n    - Variants, Extensions, Flavors\n      - GitHub Flavored Markdown (GFM)\n      - [Mermaid](https://docs.github.com/en/get-started/writing-on-github/working-with-advanced-formatting/creating-diagrams)\n- Style sheet languages\n  - CSS (.css)\n    - Selectors (and properties holding values)\n    - Typography\n      - Typefaces\n        - Fonts\n        - Serif (*e.g*., Arial)\n        - Sans-serif (*e.g*.,Times New Roman)\n    - Character encoding\n      - UTF-8, ASCII, Shift JIS, Unicode\n    - Specificity `!important \u003e id \u003e class; top to bottom; numbers`\n    - Box Model\n      - Padding -\u003e Border -\u003e Margin\n    - Display types\n      - None\n      - Block\n      - Inline\n      - Flex-box\n        - Containers and items\n        - Main and cross axis\n        - Properties and/or shorthands\n          - `flex`, `flex-flow`, `flex-grow`, `flex-shrink`, `flex-basis`, `flex-direction`, `justify-content`, `align-items`, `align-content`, `justify-items`, `gap`\n      - Grid\n        - `grid-template-columns`, `grid-template-rows`, `grid-column-gap`, `grid-row-gap`, `grid-template-areas`, `grid-area`\n      - Pseudo-elements\n      - Pseudo-classes\n      - Variables\n- Application Programming Interfaces (API)\n  - [[notes/the-odin-project/foundations/document-object-model]] (DOM)\n    - Nodes and node-lists\n    - Capture and bubbling in events.\n- JavaScript (.js)\n  - Variables\n    - `var`, `let`, `const`\n    - `NaN`, `undefined`, `null`\n    - Post-fixing and prefixing (++varName, varName++)\n    - bigInt (for big numbers)\n    - `typeof` function\n  - Operators\n    - Order of precedence\n    - Unary (one operand)\n      - `+`, `!`\n    - `==`(equal value) and `===`(equal value and data type)\n    - Nullish coalescing operator: `??` (and difference from ||, the OR operator)\n  - Functions\n    - Anonymous (without name)\n    - Arrow: `(input) =\u003e output`\n  - Loops\n    - Control Flow\n      - [Labels](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/label) (they are similar in concept to GOTO)\n  - Runtime environments\n    - Browsers\n      - Compatibility differences\n    - Node.js\n      - Node Version Manager (nvm)\n      - Node Package Manager (npm)\n  - Test Driven Development\n    - Tools\n      - Jest\n    - Assertion (do `x` if failed, do `y` if successful)\n    - Unit testing\n- Command line interface (CLI)\n  - Flags: `-` and `--`. Example: `-f`, `--help`\n- Terminal commands\n  - `mv`(move), `rm`(remove), `mkdir`(make directory), `touch`, `pwd`(present working directory), `cd` (change directory), `code`, `chrome`, `cat`, `ls`\n- File navigation\n  - `..` (to parent directory relative to the present working directory)\n  - `./folderName` (go to this folder relative to the present working directory)\n  - `~` (home directory)\n- Source Control\n\t- Version Control Systems (VSC)\n\t  - Types and history of version control\n\t  - [Git](https://www.theodinproject.com/lessons/foundations-introduction-to-git)\n\t\t- [Difference between workspace and repository](https://stackoverflow.com/questions/59441589/how-is-repository-different-from-workspace)\n\t\t- Commands\n\t\t  - `init`, `push`(to), `pull`(from), `branch`, `reflog`, `log`, `commit`, `rebase`, `add`, `restore`, `status`, `remote`, `clone`, `fetch`,`merge`,`checkout`\n\t\t- Atomic commits, commit frequency\n\t\t- Redaction of commit messages\n\t\t- .gitignore\n- GitHub\n  - Making a repository\n  - Making a GitHub Pages site\n  - Pull requests\n  - SSH Keys\n  - Personal Access Tokens (PATs)\n  - Actions\n  \t- Workflows\n- Figma\n- Excalidraw","lastmodified":"2022-05-31T01:01:30.369850461Z","tags":null},"/notes/the-odin-project/foundations/internet-infrastructure":{"title":"Internet Infrastructure","content":"\n\n# Metadata\n2022-05-21 16:42\n\n# Analogy\n- Your room is a web page\n- The objects in your room are HTML elements (represented by DOM Nodes)\n- The colors, size, etc. of those objects is CSS.\n- You are JavaScript (and do DOM Manipulation to interact with the objects in your room)\n- The other rooms in your house are other web pages\n- Your house is a website\n- The address of your house is the IP Address\n- Web developers are construction workers\n- Earthquakes are outages\n- The sign at the entrance of your house is the README\n\n# Sources\n- https://www.theodinproject.com/lessons/foundations-how-does-the-web-work\n- Own notes\n","lastmodified":"2022-05-31T01:01:30.369850461Z","tags":null},"/notes/the-odin-project/intermediate-html-css/emmet":{"title":"emmet","content":"\n\n[[2022-05-25]]\n\nhttps://websitesetup.org/wp-content/uploads/2019/11/wsu-css-cheat-sheet-gdocs.pdf\n\nRemember when we typed \"!\" at the beginning of an HTML file to generate the boilerplate code? That was done thanks to Emmet\n\n\n\nchild \u003e\nsibling +\n$ number\n{} text content\n^ climb up\n() grouping\n\nlike typeing in css\n\nintellisense\n\nhttps://docs.emmet.io/cheat-sheet/\n\nhttps://docs.emmet.io/abbreviations/lorem-ipsum/\n\nremove tag: ctrl shift -\nwrap with abbreviation: ctrl shift + \n\n-   [Why should you use Emmet?](https://www.theodinproject.com/lessons/node-path-intermediate-html-and-css-emmet#emmet)\n\nto write html or css faster\n\n-   [What are some useful Emmet abbreviations?](https://www.theodinproject.com/lessons/node-path-intermediate-html-and-css-emmet#emmet)\n\n!, remove tag, wrap with abbreviation\n\n-   [What syntax would you use to create this element `\u003cp class=\"text\"\u003e\u003c/p\u003e`?](https://docs.emmet.io/cheat-sheet/)\n\np.text\n\n-   [What syntax expands to an element with a child element inside of it? For example: `\u003cdiv\u003e\u003cp\u003e\u003c/p\u003e\u003c/div\u003e`](https://docs.emmet.io/cheat-sheet/)\n\ndiv\u003ep\n\n-   [What syntax would you use to create three elements that have the same class name?](https://docs.emmet.io/cheat-sheet/)\n\n```elementName*3.className```\n\n# Sources\n\nhttps://www.youtube.com/watch?v=V8vizNQKtx0\n\n","lastmodified":"2022-05-31T01:01:30.369850461Z","tags":null},"/notes/the-odin-project/intermediate-html-css/forms":{"title":"forms","content":"\n\n\n[[2022-05-25]]\n\n```html\n\u003cform action=\"example.com/path\" method=\"post\"\u003e\n\n\u003c/form\u003e\n```\n\n```html\n\u003cform action=\"example.com/path\" method=\"post\"\u003e\n  \u003cinput type=\"text\"\u003e\n\u003c/form\u003e\n```\n\n```html\n\u003cform action=\"example.com/path\" method=\"post\"\u003e\n  \u003clabel for=\"firstName\"\u003eFirst Name:\u003c/label\u003e\n  \u003cinput type=\"text\" id=\"firstName\"\u003e\n\u003c/form\u003e\n```\n\n```html\n\u003clabel for=\"first_name\"\u003eFirst Name:\u003c/label\u003e\n\u003cinput type=\"text\" id=\"first_name\" placeholder=\"Bob...\"\u003e\n```\n\n```html\n\u003clabel for=\"first_name\"\u003eFirst Name:\u003c/label\u003e\n\u003cinput type=\"text\" id=\"first_name\" name=\"first_name\"\u003e\n```\n\n# Sources\n\nhttps://www.theodinproject.com/lessons/node-path-intermediate-html-and-css-form-basics","lastmodified":"2022-05-31T01:01:30.369850461Z","tags":null},"/notes/the-odin-project/ruby/202205242259-middleware":{"title":"202205242259 Middleware","content":"\n\n\n### [Express (Node.js/JavaScript)](https://developer.mozilla.org/en-US/docs/Learn/Server-side/First_steps/Web_frameworks#express_node.jsjavascript \"Permalink to Express (Node.js/JavaScript)\")\n\n[Express](https://expressjs.com/) is a fast, unopinionated, flexible and minimalist web framework for [Node.js](https://nodejs.org/en/) (node is a browserless environment for running JavaScript). It provides a robust set of features for web and mobile applications and delivers useful HTTP utility methods and [middleware](https://developer.mozilla.org/en-US/docs/Glossary/Middleware).\n\n\n# Middleware\n\nMiddleware is a (loosely defined) term for any software or service that enables the parts of a system to communicate and manage data. It is the software that handles communication between components and input/output, so developers can focus on the specific purpose of their application.\n\nIn server-side web application frameworks, the term is often more specifically used to refer to pre-built software components that can be added to the framework's request/response processing pipeline, to handle tasks such as database access.\n\n### [ASP.NET](https://developer.mozilla.org/en-US/docs/Learn/Server-side/First_steps/Web_frameworks#asp.net \"Permalink to ASP.NET\")\n\n[ASP.NET](https://dotnet.microsoft.com/en-us/apps/aspnet) is an open source web framework developed by Microsoft for building modern web applications and services. With ASP.NET you can quickly create web sites based on HTML, CSS, and JavaScript, scale them for use by millions of users and easily add more complex capabilities like Web APIs, forms over data, or real time communications.\n\n# Sources\n\nhttps://developer.mozilla.org/en-US/docs/Learn/Server-side/First_steps/Web_frameworks","lastmodified":"2022-05-31T01:01:30.369850461Z","tags":null},"/notes/the-odin-project/ruby/input-and-output":{"title":"input-and-output","content":"\n\n# Metadata\n2022-05-26 00:47\n\ninput and ouput\n\n# Content\n`puts` appends a new line to the argument passed in, whereas `print` keeps things all on one line.\n\n#chomp is a method commonly used to trim separators.\n\n```ruby\nputs [1,2]\n\n1\n\n2\n\nprint [1,2]\n\n[1,2]\n```\n\n-   puts always returns nil\n-   p returns the object you pass to it\n\nso the hash rocket, =\u003e, would show the object passed\n\npretty printing arrays and hashes\n\n-   [What are the two methods we can use to output data to the user’s screen?](https://www.theodinproject.com/lessons/ruby-input-and-output#output-commands)\n\nprint and puts\n\n-   [What is similar between these two output methods?](https://www.theodinproject.com/lessons/ruby-input-and-output#output-commands)\n\nthey return nil\n\n-   [What is different between these two output methods?](https://www.theodinproject.com/lessons/ruby-input-and-output#output-commands)\n\nputs has newline, print doesnt\n\n-   [What is the method you can use to get input from the user?](https://www.theodinproject.com/lessons/ruby-input-and-output#input-commands)\n\ngets\n\n-   [What is at least one difference between the output and input methods?](https://www.theodinproject.com/lessons/ruby-input-and-output#input-commands)\n\ndoesnt return nil\n\n# Sources\nhttps://www.theodinproject.com/lessons/ruby-input-and-output\n","lastmodified":"2022-05-31T01:01:30.369850461Z","tags":null},"/notes/the-odin-project/ruby/ruby-arrays":{"title":"ruby-arrays","content":"\n# Metadata\n2022-05-26 20:38\n\narrays\n\n# Content\n\nshovel operator `\u003c\u003c`\n\n`#shift` and `#unshift` first elements\npop and push last elements\n\n```ruby\nnum_array.methods       #=\u003e A very long list of methods\n```\n\nBoth the `push` and the `\u003c\u003c` methods mutate the caller, so the original array is modified.\n\nThe `map` method iterates over an array applying a block to each element of the array and returns a new array with those results. The irb session below shows how to use `map` to get the square of all numbers in an array. The `collect` method is an alias to `map` - they do the same thing.\n\n```irb\nirb :001 \u003e a = [1, 2, 3, 4]\n=\u003e [1, 2, 3, 4]\nirb :002 \u003e a.map { |num| num**2 }\n=\u003e [1, 4, 9, 16]\nirb :003 \u003e a.collect { |num| num**2 }\n=\u003e [1, 4, 9, 16]\nirb :004 \u003e a\n=\u003e [1, 2, 3, 4]\n```\n\nadding ! makes mutations\n\nprefix, before\nsuffix, after\ninterfix, inbetween\n\n\"destructive\" here just means mutating the caller).\n\n\"is this method returning new data, or is the original data being modified?\".\n\nuse `each` for iteration and `map` for transformation.\n\n\n# Sources\n\nhttps://launchschool.com/books/ruby/read/arrays\n\nhttps://www.theodinproject.com/lessons/ruby-arrays","lastmodified":"2022-05-31T01:01:30.369850461Z","tags":null},"/notes/the-odin-project/ruby/ruby-conditional-logic":{"title":"conditional logic","content":"\n\n# Metadata\n2022-05-26 01:17\n\nconditional logic\n\n# Content\nThe only false values in Ruby are the values `nil` and `false` themselves\n\nIf there is only one line of code to be evaluated inside the block, then you can rewrite the code to be more succinct and take up only one line:\n\n```ruby\nputs \"Hot diggity damn, 1 is less than 2\" if 1 \u003c 2\n```\n\n.eql? in ruby is === in js\n\n IRB, short for **Interactive Ruby**, is a quick way to explore the Ruby programming language and try out code without creating a file. IRB is a Read-Eval-Print Loop, or REPL, a tool offered by many modern programming languages.\n \n `#equal?` checks whether both values are the exact same object in memory. This can be slightly confusing because of the way computers store some values for efficiency. Two variables pointing to the same number will usually return `true`.\n\n```ruby\na = 5\nb = 5\na.equal?(b) #=\u003e true\n```\n\nThis expression is true because of the way computers store integers in memory. Although two different variables are holding the number 5, they point to the same object in memory. However, consider the next code example:\n\n```ruby\na = \"hello\"\nb = \"hello\"\na.equal?(b) #=\u003e false\n```\n\nThis happens because computers can’t store strings in the same efficient way they store numbers. Although the values of the variables are the same, the computer has created two separate string objects in memory.\n\nIn addition to the above operators, Ruby has a special operator that is affectionately referred to as the **spaceship operator**. Unlike the other comparison operators, which all return `true` or `false`, the spaceship operator returns one of three numerical values.\n\n`\u003c=\u003e` (spaceship operator) returns the following:\n\n-   `-1` if the value on the left is less than the value on the right;\n-   `0` if the value on the left is equal to the value on the right; and\n-   `1` if the value on the left is greater than the value on the right.\n\n```ruby\n5 \u003c=\u003e 10    #=\u003e -1\n10 \u003c=\u003e 10   #=\u003e 0\n10 \u003c=\u003e 5    #=\u003e 1\n```\n\n\n**short circuit evaluation** is used in ruby to make it more efficient\n\nYou should use an `unless` statement when you want to **not** do something if a condition is `true`, because it can make your code more readable than using `if !true`.\n\n **your code needs to be readable and understandable by other people**, especially in the development stage. You can always optimize your code for efficiency once it’s finished and you’re moving to a production environment where speed matters.\n \n must use \"then\" keyword when using 1-line syntax\n \n case/switch statements have more overhead than if statements, but it can be more readable\n\n-   [What is a Boolean?](https://www.theodinproject.com/lessons/ruby-conditional-logic#boolean-logic)\n\na data type that is stored in 1 byte which holds the values of either true or false\n\n-   [What are “truthy” values?](https://www.theodinproject.com/lessons/ruby-conditional-logic#truthy-and-falsy-in-ruby)\n\nin ruby, anything that isnt false nor nil\n\n-   [Are the following considered true or false: `nil`, `0`, `\"0\"`, `\"\"`, `1`, `[]`, `{}` and `-1`?](https://www.theodinproject.com/lessons/ruby-conditional-logic#truthy-and-falsy-in-ruby)\n\nall true except nil\n\n-   [When do you use `elsif`?](https://www.theodinproject.com/lessons/ruby-conditional-logic#adding-else-and-elsif)\n\nto create another conditional\n\n-   [When do you use `unless`?](https://www.theodinproject.com/lessons/ruby-conditional-logic#unless-statements)\n\nto make a code run when something is not true\n\n-   [What do `||` and `\u0026\u0026` and `!` do?](https://www.theodinproject.com/lessons/ruby-conditional-logic#logical-operators)\n\nand, or , not\nand checks if all conditionals are true\nor checks if at least one is true\nnot makes the inverse boolean\n\n-   [What is short circuit evaluation?](https://www.theodinproject.com/lessons/ruby-conditional-logic#logical-operators)\n\na way to make logic more efficient\nif when using and, at least one value is evaluated to false, then skip all other evaluatioin\nif when using or, same thing but check when an expression evaluates to true\n\n-   [What is returned by `puts(\"woah\") || true`?](https://www.eriktrautman.com/posts/ruby-explained-conditionals-and-flow-control)\n\ntrue\n\n-   [What is the ternary operator?](https://www.theodinproject.com/lessons/ruby-conditional-logic#ternary-operator)\n\na way to write logic in a more succint way\nsyntax is conditional ? iftrue : iffalse\n\n-   [When should you use a case statement?](https://www.theodinproject.com/lessons/ruby-conditional-logic#case-statements)\n\nwhen having a lot of conditionals or when making if statements would create too many nested ifs. keep in mind that if statements are more efficient in memory in most use cases though.\n\n**how Ruby chooses a path through your program, aka \"flow control\"**\n\n```\n\u003e 1 \u003c=\u003e 1000\n=\u003e -1\n\u003e 1 \u003c=\u003e 1\n=\u003e 0\n\u003e 1 \u003c=\u003e -1000\n=\u003e 1\n```\n\n\n\n# Sources\nhttps://www.theodinproject.com/lessons/ruby-conditional-logic\n","lastmodified":"2022-05-31T01:01:30.369850461Z","tags":null},"/notes/the-odin-project/ruby/ruby-data-types":{"title":"data-types","content":"\n# Metadata\n2022-05-25 20:30\n\nData Types\n\n# Content\n\nIt’s important to keep in mind that when doing arithmetic with two integers in Ruby, _the result will always be an integer_.\n\n```ruby\n17 / 5    #=\u003e 3, not 3.4\n```\n\nTo obtain an accurate answer, just replace one of the integers in the expression with a float.\n\n```ruby\n17 / 5.0  #=\u003e 3.4\n```\n\n.to_f  .to_i\n.even? .odd?\nConcatenation\nIn true Ruby style, there are plenty of ways to concatenate strings.\n\n# With the plus operator:\n\"Welcome \" + \"to \" + \"Odin!\"    #=\u003e \"Welcome to Odin!\"\n\n# With the shovel operator:\n\"Welcome \" \u003c\u003c \"to \" \u003c\u003c \"Odin!\"  #=\u003e \"Welcome to Odin!\"\n\n# With the concat method:\n\"Welcome \".concat(\"to \").concat(\"Odin!\")  #=\u003e \"Welcome to Odin!\"\n\n.to_s   \n\nin Ruby, everything is an object\n\n:my_symbol\n\nstring interpolation\n\n\"My favorite number is #{a}!\"\n\nsymbol: immutable string\n\nsomething about floats:\nthe inaccuracies may be linked as to how, for example, in 3d games the further away you go from the point of origin, the more odd the graphics can get.\n\n### [Hashes](https://launchschool.com/books/ruby/read/basics#hashes)\n\nA **hash**, sometimes referred to as a dictionary, is a set of key-value pairs. Hash literals are represented with curly braces `{ }`. A key-value pair is an association where a key is assigned a specific value. A hash consists of a key, usually represented by a symbol, that points to a value (denoted using a `=\u003e`) of any type of data. Let's make some hashes to get the feel of it. Type along!\n\n```irb\nirb :001 \u003e {:dog =\u003e 'barks'}\n=\u003e {:dog =\u003e 'barks'}\n```\n\nhash rocket is =\u003e\n\n## [Expressions and Return](https://launchschool.com/books/ruby/read/basics#expressionsandreturn)\n\nYou may have noticed, indirectly at this point, that every time you enter something into irb you see the `=\u003e` back, which is called a _hash rocket_ (cool name, huh?), followed by whatever your Ruby expression returns. When you type something in at the irb prompt you are creating an expression. An **expression** is anything that can be evaluated, and pretty much everything you write in Ruby is an expression. An expression in Ruby always returns something, even if that's an error message or `nil`. We'll talk in more depth about `return` as we move on, but remember that _Ruby expressions always return a value_, even if that value is `nil` or an error.\n\nAn OBJECT is a location in computer memory where you can store DATA (aka VALUES).\n\nThere are many kinds of objects, including String, Number, Array, Hash, Time, ...\n\n\n```\nbundle install\n```\n\nThis folder contains a Gemfile, which tells bundle which gems to install locally and makes them available for use in that directory. In this case, we are installing RSpec, which is a popular Ruby testing framework.\n\nso rspec is like jest for javascript\n\n```ruby\n\"MyString\".methods.sort\n```\n\n```ruby\n\"MyString\".own_methods.sort\n```\n\n-   Numbers\n    -   [What are the basic arithmetic operators you can use on numbers?](https://www.theodinproject.com/lessons/ruby-basic-data-types#numbers)\n```\n+-*/%`\n```\n\n   -   [What’s the difference between an integer and a float?](https://www.theodinproject.com/lessons/ruby-basic-data-types#integers-and-floats)\n\n```ints are 1 2 3 4 floats are 1.0 2.0 3.0 4.0 ```\n\n\t\n   -   [What method would you use to convert a float to an integer?](https://www.theodinproject.com/lessons/ruby-basic-data-types#converting-number-types)\n\n.to_i .to_f\n\n    -   [What method would you use to convert an integer to a float?](https://www.theodinproject.com/lessons/ruby-basic-data-types#converting-number-types)\n-   Strings\n    -   [What is a string?](https://www.theodinproject.com/lessons/ruby-basic-data-types#strings)\n\na group of 1 or more characters. a data type.\n\n\n   -   [What are the differences between single and double quotes?](https://www.theodinproject.com/lessons/ruby-basic-data-types#double-and-single-quotation-marks)\n\t\ndouble quotes allows string interpolation, similar to javascripts ``\n\t\n\t\n   -   [What is string interpolation?](https://www.theodinproject.com/lessons/ruby-basic-data-types#interpolation)\n\na = `#{varName}`\n\ninterpolation comes from inserting something of another type\na string is a data type\nu insert something thats not a string into that string\n\n   -   [How do you concatenate strings?](https://www.theodinproject.com/lessons/ruby-basic-data-types#concatenation)\n\t\nwith + or .. or \u003e\u003e, depends on language\n\t\n\t\n   -   [What method would you use to change all the characters in your string to upper case?](https://www.theodinproject.com/lessons/ruby-basic-data-types#upcase)\n\t\n\tstring.upcase\n\n\t\n   -   [What method would you use to split up strings into arrays?](https://www.theodinproject.com/lessons/ruby-basic-data-types#split)\n\nthe string.split() method\n\n\n   -   [What are escape characters?](https://www.theodinproject.com/lessons/ruby-basic-data-types#escape-characters)\n\nfor inserting, for example, newlines\neg /n is newline\nthers also tabs, /t\netc\n\n\n   -   [How do you access a specific character or substring?](https://www.theodinproject.com/lessons/ruby-basic-data-types#substrings)\n\nindex the string\n\nindexing can be done with []\n\nso\n\ndo string[number]\n\nfor a range do string[start..end]\n\n   -   [How do you convert other data types into strings?](https://www.theodinproject.com/lessons/ruby-basic-data-types#converting-other-objects-to-strings)\n\n.to_s\n\n\n-   Symbols\n    -   [What is a symbol?](https://www.theodinproject.com/lessons/ruby-basic-data-types#symbols)\n\nan immutable string\n\n   -   [How do you create a symbol?](https://www.theodinproject.com/lessons/ruby-basic-data-types#create-a-symbol)\n\t\nwith : before the symbol name\n\t\n   -   [What’s the difference between a symbol and a string?](https://www.theodinproject.com/lessons/ruby-basic-data-types#symbols-vs-strings)\n\nstring are mutable, meaning that it can change\n\n-   Booleans\n    -   [What does `true` represent?](https://www.theodinproject.com/lessons/ruby-basic-data-types#true-and-false)\n\n1\n\n   -   [What does `false` represent?](https://www.theodinproject.com/lessons/ruby-basic-data-types#true-and-false)\n\t\n0\t\n\t\n   -   [What does `nil` represent?](https://www.theodinproject.com/lessons/ruby-basic-data-types#nil)\n\t\nnothingness, for example when u declare a variable but dont assign a value yet. not to be confused with assigning it the value of 0\n\n\n\n# Sources\n\nhttps://www.theodinproject.com/lessons/ruby-basic-data-types\n\nhttps://launchschool.com/books/ruby/read/basics","lastmodified":"2022-05-31T01:01:30.369850461Z","tags":null},"/notes/the-odin-project/ruby/ruby-introduction":{"title":"ruby-introduction","content":"\n\n# Sources\nOwn notes\n\n\n\n# Metadata\n2022-05-25 17:12\n\n202205251705\n\n# Content\nDomain Specific Languages (DSL's): Rails, Rspec\n\nWhen you start learning programming in Ruby you’ll need three tools: A text editor, a terminal, and a Ruby runtime.\n\n.rb is ruby file\n\nA terminal is an application that doesn’t do much more but provide a window to run another program, called a “shell”. A shell is a text-based program, so it does not have a window, and thus needs the terminal to be run on your graphical user interface.\n\ntab for autocomplete, double tab to see choices if multiple\n\ntools:\nterminal -\u003e shell: for commands\nruby runtime\ntext editor: vsc (or others)\nthe ruby runtime can be run in the shell\neg with ruby fileName.rb\n\nExtrapolation for other languages:\n\ngo run .\nluvit filename.lua\njava --enable-preview fileName\netc\n\nsdk = software development kit\n\n## Workflow\n-   Write some code in your text editor.\n-   Save the code to a file in a particular directory. The filename should end with `.rb`.\n-   Open your terminal.\n-   Navigate to that directory using `cd`.\n-   Execute the file using `ruby`.\n-   Switch back and forth between the text editor and terminal, so you can make small changes in your code, and then run it through `ruby` to see what it does.\n\nIn your shell you can use the `cursor up` key to go through your last used commands: you don’t have to type `ruby hello.rb` again. Just hit `cursor up` and then enter to run it again.\n\noften `$` is used to indicate that this is a system shell prompt, while `\u003e` is used by IRB to indicate that this is an interactive Ruby shell.\n\nsnake_case: define or initialize a method, variable, or file\"\n\n In Ruby, constants are denoted with all uppercase letters.\n \n namespace: variables environment\n \n The libraries that the system publishes are called \"gems\".\n  \n  npm install\n  gem install\n  sudo apt install ruby\n  \n  puts is print\n  \n  ctrl d to close\n  \n  irb -r ./your_file.rb\n  \n  ```bash\nsudo apt update\nsudo apt upgrade\n```\n\n```bash\nsudo apt install gcc make libssl-dev libreadline-dev zlib1g-dev libsqlite3-dev\n```\n\n`rbenv`, which makes it easy to install and manage Ruby versions.\n\n\nrbenv global 3.0.3\n\nruby -v\n\n# Sources\nhttps://launchschool.com/books/ruby/read/introduction\n\nhttp://ruby-for-beginners.rubymonstas.org/your_tools.html\n\nhttps://www.theodinproject.com/lessons/ruby-installing-ruby\n","lastmodified":"2022-05-31T01:01:30.369850461Z","tags":null},"/notes/the-odin-project/ruby/ruby-loops":{"title":"ruby loops","content":"\n# Metadata\n2022-05-26 18:48\n\nloops\n\n# Content\n\n```ruby\ni = 0\nloop do\n  puts \"i is #{i}\"\n  i += 1\n  break if i == 10\nend\n```\n\n```lua\ni = 0\nwhile true do\n\tprint(\"i is \"..i)\n\ti = i + 1\n\tif i==10 break\n\tend\nend\n```\n\n```ruby\n5.times do |number|\n  puts \"Alternative fact number #{number}\"\nend\n```\n\nnext: to next iteration\nbreak: the current iteration\n\nRubyists\n\ndot operator\n\n By convention, we use the curly braces (`{}`) when everything can be contained in one line. We use the words `do` and `end` when we are performing multi-line operations.\n \n When this program starts running, the call stack initially has one item -- called a **stack frame** -- that represents the global (top-level) portion of the program. The initial stack frame is sometimes called the `main` method. Ruby uses this frame to keep track of what part of the main program it is currently working on.\n \n this is why theres that main in c++ programs and the like\n \ncall stack, push and pop\n\nif, unless\nwhile, until\n\n\n# Sources\n\nhttps://www.theodinproject.com/lessons/ruby-loops\n\nhttps://launchschool.com/books/ruby/read/loops_iterators","lastmodified":"2022-05-31T01:01:30.369850461Z","tags":null},"/notes/the-odin-project/ruby/ruby-variables":{"title":"ruby variables","content":"\n# Metadata\n2022-05-25 23:38\n\nVariables\n\n# Content\n\n|varName| local/private\n\ndo end {}\n\ntokens\ndo, make block\nend, finalize block\n{, make block\n}, finalize block\n\nsee: lexical anaylizer, interpreter, etc.\n\nreminder: # for comments in ruby\nirb to test commands and other things in terminal\nruby filename.rb to run files in ruby environment\n\ncurly braces for one liners, do end otherwise\n\nvariables declared as is are local by default\n\neg ```x = 1``` defined inside a function can only be accessed by that function, in that function scope.\nso if u print that x outside the function scope it will give an error\n\n\nmethods with a bang (!) mutate (change) the original object.\n```\n-   a = \"answer\" \n\n-   a.capitalize    #returns \"Answer\" \n\n-   a                    # returns \"answer\", \u003c the original string object wasn't changed. \n\n-   a.capitalize!   #returns \"Answer\" \n\n-   a                    #returns \"Answer\"  \u003c the original string object has been changed.\n```\nassignment can be expressed as := in other programming languages\n\nsnake_case PascalCase cammelCase\n\n# Sources\n\nhttps://www.theodinproject.com/lessons/ruby-variables\n\nhttps://launchschool.com/books/ruby/read/variables\n\nhttps://www.quora.com/What-does-it-mean-if-a-Ruby-method-ends-in-an-exclamation-mark\n\nhttps://stackoverflow.com/questions/612189/why-are-exclamation-marks-used-in-ruby-methods#:~:text=Bang%20or%20exclamation%20mark%20means,replace%2C%20followed%20by%20saving.%20!\n\nhttp://ruby-for-beginners.rubymonstas.org/variables/right_goes_first.html","lastmodified":"2022-05-31T01:01:30.369850461Z","tags":null},"/notes/vsc-extensions":{"title":"vsc-extensions","content":"\n- github copilot\n- emojisense\n- eslint\n- git history\n- github copilot\n- github markdown preview\n- github pull request and issues\n- github repositories\n- gitlens\n- latex workshop\n- live server\n- markdown all in one\n- markdown emoji\n- markdown preview github styling\n- markdown preview mermaid support\n- markdown yaml preamble\n- material icon theme\n- npm\n- npm intellisense\n- remote repositories\n- wakatime\n","lastmodified":"2022-05-31T01:01:30.369850461Z","tags":null},"/notes/whitespace":{"title":"whitespace","content":"\nin logos (*e.g.,*  GitHub Icon)\n# Sources\nOwn notes\n\n\n","lastmodified":"2022-05-31T01:01:30.369850461Z","tags":null}}